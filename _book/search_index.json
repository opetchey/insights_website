[
["index.html", "Insights from Data Online companion Chapter 1 Introduction 1.1 Introduction 1.2 Workflow/checklist 1.3 R-project setup 1.4 For instructors 1.5 Datasets 1.6 More case studies 1.7 Related reading", " Insights from Data Online companion Owen Petchey, Andrew Beckerman, Natalie Cooper, Dylan Childs 2020-01-02 Chapter 1 Introduction knitr::opts_chunk$set(cache = FALSE) Welcome! {{&lt; youtube EHLLmEcqRlk &gt;}} 1.1 Introduction The preface of Insights informs about features of the book, such as its aims, content, structure, intended readership, and content that it does not include. Some of the text in the Preface may come across as a sales pitch (it probably is), but it also aims to make prospective readers clear about what they will find in Insights and why. Read the preface and answer questions here (directs to a different website), directly concerning the content of the Preface, might also help that understanding. Here you will find the additional information mentioned in the book: Questions and exercises (on a different web site) with instant feedback that go alongside the material in the book. Use the questions and exercises to check, consolidate, and further your understanding of the material in the book. One or two additional case studies, with exercises and questions . Links to the datasets used in the three case studies in the book. Details of a live data analysis demonstration we often use in our introductory undergraduate classes. A list of additional case studies/datasets that you might practice with (students), or add to your class (instructors). A list of Related Books and further reading. 1.2 Workflow/checklist Refer to this post: 2019-03-14-workflow-checklist-for-data-analysis 1.3 R-project setup Here are the ready made empty folders and Rproject files (compressed in a zip file you need to unzip – {{% staticref “files/Insights_projects.zip” “newtab” %}}Insights_projects.zip{{% /staticref %}}) mentioned in Insights (the book) section R-Projects, the best thing since sliced bread. 1.4 For instructors Perhaps add the “Notes/ideas for instructors section from the book Preface.” 1.4.1 Live data analysis demonstration In the first class of the first week of an Introduction to Data Analysis course, we lead a live data analysis demonstration. Within one hour we go from question to answer, including collection of some data about each of the students. We believe this demonstration helps students connect with the importance and fun of the content of the course. A walkthrough of the live data demonstration is provided as an {{% staticref “files/live_data_demo.Rmarkdown” “newtab” %}}Rmarkdown file{{% /staticref %}} and as {{% staticref “files/live_data_demo.html” “newtab” %}}html{{% /staticref %}} rendered from the rmarkdown. 1.5 Datasets Here are the datasets you will need in order to work along with the three case studies in Insights: Case Study 1 (bat diets) is about what bats eat and in it we work the data from the published study: Female dietary bias towards large migratory moths in the European free-tailed bat (Tadarida teniotis), by Mata and colleagues in 2016 in the journal Biology Letters paper on Biology Letters website. You must get the dataset from the online data repository in which the researchers deposited it. Get the dataset_Mata.et.al.2016.xlsx from the folder Diet analysis dataset from the dryad repository. Please make sure you get the file from version 2 of the dryad data publication. The dataset is stored on dryad in Excel format. Case Study 2 (prey diversity) is about the hypotheses that more pathways of energy flow into a predator (i.e. more prey species) stabilise the predator population dynamics (the article about case study 2 is published here). Get the data the data file dileptus expt data.csv from the dryad repository associated with the publication about the data (make sure you get version 2 of the dataset). Case Study 3 (dietary diversty and polity) is about whether the diversity of food available to the population of a country is associated with the political system of that country. It requires three datasets: A dataset containing information about country’s political system. You can acquire the full dataset from this web page of the Center for Systemic Peace. Scroll down to the section Polity IV: Regime Authority Characteristics and Transitions Datasets and click on the Excel Series link to the right of the Polity IV Annual Time-Series, 1800-2017 box. A dataset of food available in countries (FAO food balance sheet data) from the FAO website. The datafile could get is called FoodBalanceSheets_E_All_Data.csv and is 206MB. You can, as mentioned in the book, opt for the trimmed-down version of the dataset that we supply click here to start download. A dataset that matches some country names between the political system and FAO datasets click here to start download. 1.6 More case studies Here are several more datasets, again all about food, and due to the bias of the authors of the book, mostly analyses of diet composition of various organisms. As the book goes to press, and unless we have since added additional information below, we only give the link to the original publication and to the dataset, and we have not ourselves worked through these data. Its all up to you! But don’t hesitate to get in touch if you do work through them, and if you find something odd, difficult, or even impossible. 1.6.1 Hungry ladybirds An analysis of what determines how fast ladybirds eat. Original publications: https://besjournals.onlinelibrary.wiley.com/doi/abs/10.1111/1365-2664.13159 Data: https://datadryad.org/resource/doi:10.5061/dryad.gq224h3 1.6.2 Seal suppers An analysis of what seals eat. Original publication: https://onlinelibrary.wiley.com/doi/abs/10.1002/ece3.4474?af=R Data: https://doi.org/10.5061/dryad.g23j32s 1.6.3 More bat poop Another analysis of bat diets. This one of data from 1’252 faecal pellets of five species of bat. Original publication: https://onlinelibrary.wiley.com/doi/abs/10.1002/ece3.4559 Data: https://doi.org/10.5061/dryad.6880rf1. 1.6.4 Marten isotopes Analysis of marten diets by stable isotope analysis Original publication: https://onlinelibrary.wiley.com/doi/abs/10.1002/ece3.4559 Data: https://doi.org/10.5061/dryad.6880rf1. 1.6.5 Snake diets Original publication: https://besjournals.onlinelibrary.wiley.com/doi/pdf/10.1111/1365-2656.12972 Data: https://datadryad.org/resource/doi:10.5061/dryad.8kt4675 1.6.6 Desert bat diets Original publication: https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.4896 Data: https://datadryad.org/resource/doi:10.5061/dryad.7j0c8dm 1.6.7 Desert bat diets Original publication: https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.4896 Data: https://datadryad.org/resource/doi:10.5061/dryad.7j0c8dm 1.6.8 Birds eating insects Original publication: https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.4787 Data: https://datadryad.org/resource/doi:10.5061/dryad.4f1n785 1.6.9 Diets of predatory fish Original publication: https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.4857 Data: https://datadryad.org/resource/doi:10.5061/dryad.0jm1dt2 1.6.10 Cervical spine compression and MRI (not food related) Original publication: https://doi.org/10.5061/dryad.kk653rs Data: https://datadryad.org/resource/doi:10.5061/dryad.kk653rs 1.6.11 Lots of other datasets here: https://www.nature.com/articles/s41559-017-0458-2/tables/1 and here: https://cran.r-project.org/web/packages/TH.data 1.7 Related reading Refer to this article: 2019-03-14-some-useful-r-help-tutorial-reference-websites Grafen &amp; Hails (2002) Modern Statistics for the Life Sciences. 368 pages. Focuses on and thoroughly covers statistics, using general linear models. Works with Minitab, SAS, SPSS. Crawley (2005) Statistics - An Introduction Using R. 327 pages. A concise introduction focused on statistical analyses using R. Crawley (2012) The R Book. 1076 pages. A comparatively encyclopedic account of R; “extensive and comprehensive”. Hothorn &amp; Everitt (2014) A Handbook of Statistical Analysis Using R. 456 pages. Focuses on statistical analyses; probably more graduate level. Whitlock &amp; Schluter (2015) The Analysis of Biological Data. 818 pages. Contains practice &amp; assignment problems. Focused on statistics, covers data management/visualization in passing. Maindonald &amp; Braun (2010) Data Analysis and Graphics Using R. 549 pages. Assumes some existing knowledge of statistics and data analysis. For final year undergraduate / graduate level. Reaches to Bayesian methods, GLMMs, and random forests. Hector (2015) The New Statistics with R. 199 pages. Focused on statistics, specifically linear models. “New” refers to new methods that are included, and focusing on effect sizes rather than p-values. Field, Miles, &amp; Field (2012) Discovering Statistics using R. 957 pages. Focused on statistics, though covers data management and visualization. Goes up to multilevel linear models. Classic R and R Commander (no RStudio). Written with humour, has “characters”, associated website with datasets, scripts, webcasts, self-assessment question, additional material, answers, powerpoint slides, links, and cyberworms of knowledge. Field (2016) An Adventure in Statistics. 768 pages. At first (and perhaps later) sight quite inspirational. Starts with a chapter on why we need science (maybe to get insights?) followed by one on reporting findings. As such, has similar approach to Insights, to start with motivation and with the end in mind. Continues with a thorough account of data analysis and statistics suitable for undergraduates. Bolker (2008) Ecological Models and Data in R. 396 pages. Page 3 states “I assume that you’ve had the equivalent of a one-semester undergraduate statistics course…” and on page 4 “If you have used R already, you’ll have a big head start.” Venables, Smith, et al (2009) An Introduction to R. Reference book for the R Language (classic R). Very concise. Contains a 15-page chapter on statistics, including linear and non-linear models. Grolemund &amp; Wickham (2017) R for Data Science. 492 pages. Focus on “Data Science”, “an exciting discipline that allows you to turn raw data into understanding, insight, and knowledge.” Book organized broadly by the workflow: Explore, Wrangle, Program, Model, Communicate. Quite comprehensive in coverage of the “tidyverse” approach to using R. McKillup (2012) Statistics Explained. An Introductory Guide for Life Scientists. 400 pages. Quite well rounded, including experimental design, collecting and displaying data, doing science, ethics. Majority walks through statistical tests… linear models, non-parametric tests, multivariate. Dytham (2010) Choosing and Using Statistics: A Biologist’s Guide. 320 pages. Focused on statistics, as the title suggests. Adler (2012) R in a Nutshell. A Desktop Quick Reference. 611 pages. A great reference book. Dalgaard (2008) Introductory Statistics with R. 364 pages. A concise introduction focused on statistical analyses using R. S* pector (2008) Data Manipulation with R. 154 pages. Covers importing data, working with databases, character manipulation, dealing with dates, using loops, conversion to data frames. Ellis (2010) The Essential Guide to Effect Sizes. 188 pages. Focuses on interpreting the practical everyday importance of research results, power, and synthesizing disparate results. Does this via effect sizes. Based on a course for honed on “smart graduate students”. Gotelli &amp; Ellison (2012) A Primer of Ecological Statistics. 614 pages. Upper-undergraduate to graduate level. Probability and statistical thinking, distributions, central tendency and spread, p-values, etc. Then experimental design; then specific analyses. Finishes by covering estimates of diversity and occurrence. Gonick &amp; Smith (1993) The Cartoon Guide to Statistics. 230 pages. Covers summary and display of data, probability, central limit theorem, confidence interval estimation, etc. McKillup (2011) Statistics Explained. An Introductory Guide for Life Scientists. 416 pages. Begins by explaining about doing science, collecting and displaying data, experimental design, and responsibility and ethics. Then works through a good list of statistical methods for beginning to upper-level undergraduates. Sokal &amp; Rohlf (1995) Biometry. The Principles and Practices of Statistics in Biological Research. 880 pages. Thorough, comprehensive, and often quite technical title focused on statistics. Zar (2010) Biostatistical Analysis. 960 pages. Thorough and comprehensive coverage of “statistics analysis methods used by researchers to collect, summarise, analyse and draw conclusions from biological research. Suitable for beginners to advanced users. McElreath (2016) Statistical Rethinking. 469 pages. Brilliant. What should be taught to undergraduates, if only the world would then be ready for them. Healy (2017) Data Visualisation for Social Science. A practical introduction with R and ggplot2. Focuses on appropriate visualization for getting knowledge from data. Covers principles and practices of looking and presenting data. Zumel &amp; Mount (2019) Practical Data Science with R. "],
["insights-workflow.html", "Chapter 2 Insights Workflow", " Chapter 2 Insights Workflow "],
["before-touching-rrstudio.html", "Chapter 3 Before touching R/RStudio", " Chapter 3 Before touching R/RStudio Question Hypothesis(es) Study methods, materials, design. Response variable(s) Explanatory variable(s) Prediction(s) Secure resources Perform study, including data collection. If you don’t know, e.g. because you did not conduct the study, before import into R inspect the datafiles in a spreadsheet program (so long as they’re not too big) and note the following: if multiple datafiles are used, which contains what what variable names are used in the datafiles, and what these mean (i.e. which are response variables, which are explanatory, and what are others) number of rows and columns in the datafiles arrangement of the data in the datafile, e.g. tidy or not tidy any obvious things to deal with (e.g. how missing values are coded, date/time information, codes that need expanding, variable/column names that will need changing) "],
["after-we-read-the-datafiles-into-r.html", "Chapter 4 After we read the datafile(s) into R:", " Chapter 4 After we read the datafile(s) into R: number of variables/columns number of rows variable types appropriate reprentation of missing values tidy the data (at some point) check for innapropriate duplicates fix dates replace any codes with informative words check for appropriate variable entries, e.g. levels of characters, ranges of numerics numbers of “things”, number of experimental units, treatments, treatment combinations, temporal samples calculate response and/or explanatory variable(s) (if required) "],
["after-data-tidying-and-cleaning.html", "Chapter 5 After data tidying and cleaning", " Chapter 5 After data tidying and cleaning Shapes of variables (i.e. inspect the histograms of explanatory and response variables). Relationships among explanatory variables. Relationships relevant to hypotheses/predictions. Assess confidence in revealed patterns. "],
["additional-r.html", "Chapter 6 Additional R", " Chapter 6 Additional R To be completed. "],
["additional-concepts.html", "Chapter 7 Additional concepts", " Chapter 7 Additional concepts To be completed. "],
["WFD-2.html", "Chapter 8 Are diets more diverse in more democratic countries? 8.1 About this case study 8.2 Introduction to the study and data 8.3 A little preparation 8.4 Polity data: origins, acquire, import, clean, tidy, NAs, duplicates 8.5 First insights from the polity data 8.6 Acquire, import, check the FAO Food balance sheet data 8.7 Merge the two datasets 8.8 Tidying up 8.9 Shapes 8.10 Relationships 8.11 Wrapping up 8.12 Some questions", " Chapter 8 Are diets more diverse in more democratic countries? 8.1 About this case study This case study is primarily meant to supplement the material in the book Insights from Data by Petchey, Beckerman, Childs, and Cooper. If you don’t understand something in the case study, have a look at that book (perhaps again), or search for help, or get in touch with us. 8.2 Introduction to the study and data In this case study we will look at the diversity of food available to people living in countries around the world. And we will explore one potential influence of this diversity—the political system (e.g. democratic) of the country. Why this? Why not? There are likely lots of factors governing the diversity of food available to the population of a country, and political system is just one. We could also look at gross domestic product, location, population size, and so on. But let’s keep things relatively simple and straightforward for the moment. You can make things more complex if you choose to look further into the question, and it may be essential to do so. Just wait until after you’ve mastered the simpler though perhaps still challenging material in this case study. To be clear, we are asking the question of whether the diversity of food available to the population of a country is associated with the political system of that country. We hypothesise that more freedom will result in more diversity of food availability (figure XXa – illustrate the hypothesis). We will restrict ourselves to two variables: diversity of food available and political system. Let’s use a measure diversity known as the Shannon index, which is greater if there are more food types and if the amount of each is more evenly distributed among them (figure XXb – illustrate shannon in 2x2). As far as we know, the analyses are novel. Any insights will be new! Though, since the findings are not published / peer reviewed, they should be treated as preliminary and (as usual) be critically assessed. The data about what food is available to the people of a country is from the FAO Food balance data and that about the political system is from the Polity™ IV Project dataset. Hence there will be something fundamentally new in this case study: importing two different datasets and then merging them together. As you work through this chapter, try following along with the workflow/checklist on this web page. 8.3 A little preparation Make a new folder for this case study, and in it a folder called in data (this will contain any datasets for this case study/project). In RStudio create an RStudio project and save it in the project folder (not the data folder). Close RStudio and double click on the project file to re-open RStudio. Create a new R script file. In this new script file make a comment about what it will contains, and then load all the libraries we so far used. Then save the file and give it a filename that is intuitive, unique, and memorable, so it is easy to search for and find. Install the vegan and ggbeeswarm library if you have not already done so, otherwise library(vegan) and library(ggbeeswarm) will not work. Look at the Packages section of the Getting Acquainted chapter if you need help with installation. 8.4 Polity data: origins, acquire, import, clean, tidy, NAs, duplicates 8.4.1 Data origins and acquisition A Polity is a political entity. The Polity™ IV Project aimed to code the characteristics of states in the world for the purposes of comparative quantitative analysis (i.e. what we’re about to do!). The project and resulting datasets are used for monitoring regime change and for studying effects of regime authority. Nevertheless, the data “should be treated and interpreted with due caution. Its primary utility is in investigative research which should be augmented by more detailed analysis.”; quoted from page 16 of the Dataset User’s Manual by Monty G. Marshall, Ted Robert Gurr, and Keith Jaggers. Find out more about the project at the Center for Systemic Peace website. You can acquire the complete dataset from this web page of the Center for Systemic Peace. Scroll down to the section Polity IV: Regime Authority Characteristics and Transitions Datasets and click on the Excel Series link to the right of the Polity IV Annual Time-Series, 1800-2017 box. The downloaded file is an Excel spreadsheet. We recommend you open this in Excel and save it as a csv file, but we’ll also show below how to read the Excel file into R. Looking at the dataset in Excel or something similar, you will see that the dataset has 17’061 observations and 36 variables. We will work with only three of the variables: country - a character variable containing the country name. year - a numeric variable containing the year. polity2 - a numeric variable giving the revised combined polity score from +10 (strongly democratic) to -10 (strongly autocratic). The revised combined polity score, according to the Dataset User’s Manual is a score varying from -10 for the most autocratic of polities, up to +10 for the most democratic, that “provides a convenient avenue for examining general regime effects in analyses”. (The manual also states a number of reasons for treating the variable with caution.) 8.4.2 Data import If you did the preparation mentioned above, made a project, made a csv file from the Excel file, and put the data file in the data folder of that project, and you started R by double clicking on the RProject file (or switching to this project), the following code should import the data: rm(list = ls()) pol &lt;- read_csv(&quot;data/p4v2015.csv&quot;) ## Parsed with column specification: ## cols( ## .default = col_double(), ## scode = col_character(), ## country = col_character() ## ) ## See spec(...) for full column specifications. If you want to read direct from the Excel file, use this: pol &lt;- readxl::read_excel(&quot;data/p4v2015.xls&quot;) Is RStudio showing the correct number of rows and columns? Is it showing the appropriate variable types for each of the three variables? The Country variable should be a character variable, the other two should be numeric). 8.4.3 Tidy and clean We only want to work with three of the 36 variables, so we use the select function to keep only these, and that the same time rename them to standardise the variable names by making them all begin with an upper case letter and then have lower case: pol &lt;- pol %&gt;% select(Country = country, Year = year, Polity2 = polity2) Because we assign the result of this operation to pol we are getting rid of the previous version of pol with this new one. The data set has only one observation (of Polity) per row, so it is already tidy… we do not need to gather observations from multiple columns into one. 8.4.4 Deal with NAs As usual, we should see if there are any NAs in the data, understand what they might result from, and decide what how to treat them. The next code makes a new dataset pol_nas that contains the rows that contain a missing value in any of the three variables. pol_nas &lt;- pol %&gt;% filter_all(any_vars(is.na(.))) This dataset contains 235 rows, and viewing it we see that it is only the polity2 variables that contains NAs. I.e. there are 235 missing Polity2 values. A brief perusal of the Dataset User’s Manual reveals a clue about why some of all of these NAs exist: “Cases of foreign “interruption” are treated as “system missing.” Let us decide to treat these missing values as unimportant for further analyses, and to not include them in any further analyses, by removing them from the dataset. We know this should leave us with 17,061 - 235 = 16,826 rows of data: pol &lt;- na.omit(pol) You should see that we do, indeed, now have 16,826 rows of data. We might now like to clean up a little, by removing the pol_nas dataset from R (you will see it dissapear from the Environment pane): rm(pol_nas) 8.4.5 Deal with innapropriate duplicates We expect there to not exist any more than one Polity score per country per year. We check this by first selecting only the Country and Year variables, then getting any duplicate rows with the duplicated function. The duplicated function returns a vector of TRUE and FALSE, where TRUE means a row is a duplicate. We can then get the sum of this vector to count the number of TRUEs (i.e. number of duplicated rows). pol %&gt;% select(Country, Year) %&gt;% duplicated() %&gt;% sum() ## [1] 2 Interesting. There are two cases that contain duplicates. Let’s see which Country-Year combinations these are: pol %&gt;% select(Country, Year) %&gt;% filter(duplicated(.)) ## # A tibble: 2 x 2 ## Country Year ## &lt;chr&gt; &lt;dbl&gt; ## 1 Ethiopia 1993 ## 2 Yugoslavia 1991 And look at the duplicated cases: pol %&gt;% filter(Country == &quot;Yugoslavia&quot;, Year == 1991) ## # A tibble: 2 x 3 ## Country Year Polity2 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Yugoslavia 1991 -5 ## 2 Yugoslavia 1991 -5 pol %&gt;% filter(Country == &quot;Ethiopia&quot;, Year == 1993) ## # A tibble: 2 x 3 ## Country Year Polity2 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Ethiopia 1993 0 ## 2 Ethiopia 1993 1 Looking through the Dataset User’s Manual does not readily shed light on these duplicates. Let’s remove both cases of duplication by taking the average Polity2 score. This should result in a dataset with 16,824 rows. pol &lt;- pol %&gt;% group_by(Country, Year) %&gt;% summarise(Polity2 = mean(Polity2)) %&gt;% ungroup(pol) We just made a decision about how to deal with the duplicated scores for Ethiopia in 1993. We took the mean. There are other things we could have done (e.g. use a different measure of central tendency, such as the median). So we have made an arbitrary choice in our analysis pathway. We went down one path when we could have chosen another. We need to 1) recognise and record when we make decisions like this, and 2) check to see if our conclusions are robust to variation in what we choose to do. (Here, conclusions would not be affected by using the median, as there are only two values being averaged.) Let us again check for duplicate Country-Year combinations: pol %&gt;% select(Country, Year) %&gt;% duplicated() %&gt;% sum() ## [1] 0 Good, there are now no duplicated cases. 8.4.6 Check ranges of numeric variables Its a good idea to check if numeric variables contain any weird values. From the Dataset User’s Manual we expect the Year variable to be values including the 19th, 20th, and 21st centuries, and the Polity2 variable to have a minimum of -10 and maximum of 10. Write code to check these are true in the imported data. pol %&gt;% summarise(min_year = min(Year), max_year = max(Year), min_pol = min(Polity2), max_pol = max(Polity2)) ## # A tibble: 1 x 4 ## min_year max_year min_pol max_pol ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1800 2015 -10 10 8.5 First insights from the polity data Before we move on to the FAO dataset, lets have quick look at some features of the Polity data. Let’s look at the frequency distributions of the two numeric variables. We will do this efficiently by first gathering the information in the two variables into one, then plotting. This is the method used and described in detail in the Insights book. pol %&gt;% gather(key = Variable, value = Value, 2:3) %&gt;% ggplot(aes(x = Value)) + geom_histogram(bins = 21) + facet_wrap( ~ Variable, scales = &quot;free&quot;, nrow = 2) The Polity2 variable is numeric with a minimum values of -10 and a maximum of 10 (as we already knew). The most common polity score is very democratic (+10), there are relatively few moderately democratic polity score, and there are a number of several levels of autocratic polity scores. That is, the distribution appears somewhat bimodial. We must be aware, that these are distributions of each score, with many scores for each country. The Year variable is distributed with more values in the later years than earlier years—it makes some sense that we have more information about the recent than about the distant past. None of the three variables have any missing values, so we expect to see no warnings about excluded data points, and to not have to deal with any other issues caused by missing values. Great! Try to write code to find out each of these: Number of countries in the dataset. Number of years in the dataset, and first year, and last year. How many records (years of data) for each country. First and last year of data for each country. Whether there are gaps (years without data) in each country. Number of countries with gaps. Number of countries with records in each year. Temporal change in polity in some countries that interest you. Graphs to visualise these where appropriate. Number of countries, years, first year and last year: pol %&gt;% summarise(num_countries = length(unique(Country)), num_years = length(unique(Year)), first_year = min(Year), last_year = max(Year)) ## # A tibble: 1 x 4 ## num_countries num_years first_year last_year ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 193 216 1800 2015 For each country, number of years of records, first year, last year, number of years between first and last, and if there are gaps of no data: per_country_pol &lt;- pol %&gt;% group_by(Country) %&gt;% summarise(num_years = length(unique(Year)), first_year = min(Year), last_year = max(Year), years_interval = last_year - first_year +1, gaps = num_years != years_interval) Number of countries with gappy information: per_country_pol %&gt;% summarise(sum(gaps)) ## # A tibble: 1 x 1 ## `sum(gaps)` ## &lt;int&gt; ## 1 46 A graph of the number of countries with records in each year: Change in polity in some countries of interest (to the authors at least): countries_of_interest &lt;- c(&quot;Bhutan&quot;, &quot;Brasil&quot;, &quot;Cuba&quot;, &quot;Cambodia&quot;, &quot;Estonia&quot;, &quot;Yugoslavia&quot;, &quot;Australia&quot;) pol %&gt;% filter(Country %in% countries_of_interest) %&gt;% ggplot(aes(x=Year, y=Polity2, col=Country)) + facet_wrap(~ Country) + geom_point() + geom_line() Insight That the polity score of a country can change so greatly has implications for our subsequent analyses. For example, calculating and using a mean polity score for each country (average across years) may be unwise as it would ignore such temporal change. 8.6 Acquire, import, check the FAO Food balance sheet data This data shows, for various Areas in the world, such as countries and continents, the annual supply and use of various food Items such as “Wheat and products”, “Honey”, and “Crustaceans”. Supply and use includes what are called Elements of the food supply equation; elements such as “Production”, Import Quantity“, and”Food supply quantity (kg/capita/yr)&quot;. The words Area, Item, and Element are emphasised because they are variables in the dataset, as described further below. There is a lot of important information about this data available on the FAO Food Balance Sheet Metadata web page web page. And even more in the Food Balance Sheet Methodology Handbook. The full dataset is about 210MB and can be downloaded from the FAO web page. Importing this takes about 4 seconds on a reasonably fast laptop. As you will see below, we will make a smaller dataset (about 15MB) and save it, so we don’t have to work with the full dataset. The full dataset has 238,560 rows and 113 variables. The first nine variables are: Area.code - A numeric variable containing number codes for the Area variable. Area - A character variable containing the geographic area that a row is about, for example, a country name or a continent name. Item.code - A numeric variable containing number codes for the food items in the Item variable. Item - A character variable containing the food item a row is about. Element.code - A numeric variable contains number codes for the Element variable. Element - A character variable showing the particular supply or utlilisation element a row is about. These are the elements of the food balance equation. Unit - The units of measure of the quantity in the row. Y1961 - A numeric variable giving the quantity in year 1961 Y1961F - A character variable giving information about the data (F is for Flag), such as “Official data”, “FAO data”, etc. The Definitions and standard button on this web page http://www.fao.org/faostat/en/#data/FBS/metadata leads to much much more information about the variables and entries. You could get the FAO food balance data from the FAO website. The datafile you would get is called FoodBalanceSheets_E_All_Data.csv and is 206MB, i.e. it is quite big. We need, however, only a small amount of the information in this dataset. So to make things easier for ourselves and for you, we created a smaller dataset containing only the data we need, and saved it as an Rdata file. This file type fits more data into a smaller space—the resulting file FoodBalanceSheets_E_All_Data_reduced.Rdata is 1.9MB. We put this smaller data file on the Insights Website, so if you don’t want to make it yourself, please get it from there. If you do want to go through this process, feel free to use the code immediately below, otherwise skip over this. It’s pretty straightforward, apart from two things. First, we give the read_csv an argument you didn’t previously see: encoding. This helps read_csv properly recognise otherwise problematic symbols. In this case, it ensure that country names such as Côte d’Ivoire don’t cause problems (the ô can do so). Second, the penultimate line saves the produced tibble ff to a Rdata type of data file; though even that new type of instruction should be quite transparent to you by now. ## Get the full food balance sheet dataset *All data* from the FAO website: ## http://www.fao.org/faostat/en/#data/FBS/metadata. ## Reduce the size of the FAO data, so easier to deal with ## import FAO data ff &lt;- read_csv(&quot;data/FoodBalanceSheets_E_All_Data.csv&quot;, locale = locale(encoding = &#39;ISO-8859-1&#39;)) ## First fix some variable names: names(ff) &lt;- str_replace_all(names(ff), c(&quot; &quot; = &quot;_&quot;)) ## Remove all non-countries ff &lt;- filter(ff, Country_Code &lt; 5000) ## keep only some of the elements ff &lt;- filter(ff, Element %in% c(&quot;Food supply quantity (kg/capita/yr)&quot;)) ## remove some other variables that won&#39;t be used ff &lt;- select(ff, -Country_Code, -Item_Code, -Element_Code, -Element, -Unit, -ends_with(&quot;F&quot;)) ## save the reduced file saveRDS(ff, &quot;data/FoodBalanceSheets_E_All_Data_reduced.Rdata&quot;) rm(ff) The next line reads in that smaller dataset: #rm(list = ls()) fbs &lt;- readRDS(&quot;data/FoodBalanceSheets_E_All_Data_reduced.Rdata&quot;) Feel free to have a look at the whole dataset with the skim function. We select a few columns first, as otherwise the output is rather long due to there being 112 variables in the dataset. #select(fbs, Country, Item, Y1961, Y1971, Y1981, Y1991, Y2001, Y2011) %&gt;% # skim() There are 17’953 observations/rows in the tibble. There are 182 countries, so 11 fewer than in the Polity data. We will later check which ones are not in the Polity data, and if any in the Polity data are not in the FAO data. There are 114 food Items… wow, that’s a lot of different types of food! Take a look at some of the values… it’s quite interesting to see what’s recorded. Both the Country variable and the Item variable are characters type variables as expected. If the data contained every possible combination of country and item we would expect 182 * 114 = 20’748 observations. That there are only 17’953 tells us that some combinations are missing. We will find out which these are. The six year variables are, as expected numeric—they are amounts of food available (food supply quantities in kg per capita per year). We see there are quite a lot of missing values in the earlier years, and fewer in the later years. This might be expected if development of methods and adoption of them becomes more complete through time. 8.6.1 Tidy the FAO data The FAO data is not tidy. You should be able to figure out in what respect it is “dirty”. Yes, the same information is spread across multiple columns/variables, such that there are multiple observations in each row. More specifically, the data for each year is in a separate column—data for different years are spread across columns—each row contains lots of observations each from a different year. Before we make the data tidy, let’s try to figure out how many rows it should have when tidy. We will gather all the information that is currently spread across columns and put it in one column. A visualisation of a simplified version of the dataset is in Figure 8.1. The answer is the amount of information that’s in the columns that we want to gather into a single column. In the untidy/wide data there are 55 variables containing the data we wish to gather (because we are not gathering the information from Country or Item). Each of those variables has 17,953 rows, so we expect the long/tidy data to have 55 * 17,953 = 987,415 rows. FIGURE 8.1: The same data (a) in long/tidy format and (b) in wide format, with colours and arrows linking the same data in the two different formats. Let’s now make the data tidy, and clean up the year variable. We first gather all the same data from columns three through 57 (3:57) into a new variable called Food_Supply_Quantity and put the information about which year each observation belongs to in a new variable called Year. Because the column names begin with Y (e.g. Y1961) we then need to keep only the 2nd through to 5th character in the Year variable (using the substr function), and convert the result to a numeric type variable (with the as.numeric function), doing all this within a mutate in order to replace the old year variable with the converted one. Let’s then take a look at the data with skim. Here’s the code for all that: fbs_long &lt;- fbs %&gt;% gather(key = Year, value = Food_Supply_Quantity, 3:57) %&gt;% mutate(Year = as.numeric(substr(Year, 2, 5))) #skim(fbs_long) We see that as expected the new tibble contains 987,415. Excellent! This near-magical gather function has done a lot of very tedious work for us, very quickly. There are still the same number of countries (182) and food items (114). Now we see that the data covers from year 1961 to 2015. We also get the distribution of the food supply quantity variable… it looks to have lots of small values, and a few large. Is this what you would expect? Perhaps supply is large for a few basic foods (e.g. grains) and then there are lots of relatively rare food items. But beware that at present we are looking at the distribution including data from across years and countries. We will soon look more closely at this distribution. The skim also tells us that only the food supply quantity variable contains any missing values, and that there are 158,307 of them. 8.6.2 Clean the FAO data Are all the years represented in the dataset? Let’s look at the unique values of the year variable: unique(pull(fbs_long, Year)) ## [1] 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 ## [11] 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 ## [21] 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 ## [31] 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 ## [41] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 ## [51] 2011 2012 2013 2014 2015 Yes, every year from 1961 to 2015 is represented (by at least one observation). There are 15 years in the dataset. Another good check to do on a dataset is for duplicated rows, if one can reasonably conclude that there should be none. Do we think there can be any duplicated rows in this dataset? That would be the exactly the same value of Country, Item, Year, and Food Supply Quantity. Finding any duplicated rows is fairly straightforward thanks to the duplicated function, which returns a TRUE or FALSE for each row of a dataset, TRUE if the row is duplicated somewhere, or FALSE otherwise. Then we can filter the rows by these TRUE/FALSE values to give only the duplicated rows: duplicated_records &lt;- filter(fbs_long, duplicated(fbs_long)) Note that the resulting tibble contains only one example of each duplicate (look at the data with View(duplicated_rows). There are, in fact, 9,287 rows that are duplicated (not unique). Let’s assume that these are mistaken duplicate entries, and so reduce to a dataset with only unique rows: fbs_long &lt;- unique(fbs_long) Now, if we’re being really paranoid, we might wonder if there were ever two different values of food supply recorded for the same country in the same year. Put another way, if we look at only the Country, Year, and Item variables, do we see duplicated rows? part_duplicated_records &lt;- fbs_long %&gt;% select(Country, Item, Year) %&gt;% duplicated() %&gt;% filter(fbs_long, .) Looking at the result we see there are 10,733 rows with duplicated Country, Year, and Item. This is weird. And that these duplicates are only for food items “Eggs” and “Milk - Excluding Butter”. We have no idea why there are multiple entries for these two items! Here’s an example of one of the duplicates: filter(fbs_long, Country == &quot;Albania&quot;, Item == &quot;Eggs&quot;, Year == 1961) ## # A tibble: 2 x 4 ## Country Item Year Food_Supply_Quantity ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Albania Eggs 1961 1.5 ## 2 Albania Eggs 1961 1.8 In the same year for the same country there are two values of Food_Supply_Quantity: 1.5 and 1.8. But it’s quite reasonable to think there can be only one. Let’s solve this problem by rather arbitrarily calculating one value, the average, of these duplicated records: fbs_long &lt;- fbs_long %&gt;% group_by(Country, Year, Item) %&gt;% summarise(Food_Supply_Quantity = mean(Food_Supply_Quantity)) %&gt;% ungroup(fbs_long) Time to tell the truth. It took us a long long time to realise there were duplicated records in the FAO dataset. We did not pro-actively think to check for duplicates. We only realised there must be duplicates when we tried to get the numbers to add up below. They did not before we removed the duplicates, and this led us to find the duplicates. Once we found them, we removed them above. Now it looks like we were really smart to think they might occur, check for them, find them, and remove them. In reality we were not so smart. What we were, however, was **absolutely determined* to understand why the numbers did not add up. You must also be as strict in your work. After we found the duplicates in this dataset, we also looked in the Polity data, found some, and then decided to add a check for duplicates to all case studies, and to advise you to make this a standard sanity check when you start looking at a dataset. That was a major step forward. Now we know our dataset has only unique observations. Now let’s do another sanity check. Because there are 182 countries and 114 food items we know there could be 20,748 observations for each year. Let’s see how many there really are: obs_per_year &lt;- fbs_long %&gt;% group_by(Year) %&gt;% summarise(num = n()) There are only 17,589 observation per year. Either not all countries reported in all years, not all items were reported by each country in each year, or both! First let’s see how many countries there are per year: countries_per_year &lt;- fbs_long %&gt;% group_by(Year) %&gt;% summarise(num = length(unique(Country))) There are indeed 182 countries per year. All countries are included in all years. Let’s see how many Items each country reported (across all years): items_per_country &lt;- fbs_long %&gt;% group_by(Country) %&gt;% summarise(num = length(unique(Item))) Aha. Not all items were reported by all countries. Turkmenistan reported on the fewest (62), while China reported on the most (110). Let’s see if the sum of the number of items reported by each country is the number of observations per year. sum(pull(items_per_country, num)) ## [1] 17589 Yes! This is the same as the number of observations per year. All this pretty much guarantees that each country consistently (across all years) reported on a constant set of the items, or there is an observation for this set of items in each year. We didn’t just now find out anything new about the data, but we did confirm that we understand it properly. Checks and balances increase confidence. Now let’s look at the missing values: #skim(fbs_long) We still have 155,003 missing values. Why? Where are they coming from? Let’s dig a bit deeper by getting the number of observations per year, and the number and proportion of these that are missing values: obs_per_year &lt;- fbs_long %&gt;% group_by(Year) %&gt;% summarise(num = n(), num_na = sum(is.na(Food_Supply_Quantity)), prop_na = num_na / num) And take a look at the data using View(obs_per_year). We can also see quite a bit if we plot the summary data (8.1) with the following code: FIGURE 8.2: The number of observations, the number of missing values and the proportion of missing values in each year of the data. We see that from 1961 to 1989 there are 2,592 (14.74%) missing values per year. In 1990 and 1991 there are 2,493 (14.17%) missing values per year. From 1992 to 2011 less than 5% of the values are missing, and from 2012 to 2015 (the last year in the dataset) most or all the values are missing. Can you think of why there might be fewer missing values after 1991? Let’s look at one country (its identity might give you a clue)… Belarus. Let’s get the number of values, missing values, and proportion of missing values for Belarus in each year. Belarus_obs_per_year &lt;- fbs_long %&gt;% filter(Country == &quot;Belarus&quot;) %&gt;% group_by(Year) %&gt;% summarise(num = n(), num_na = sum(is.na(Food_Supply_Quantity)), prop_na = num_na / num) Looking at this dataset we see that all values are missing until 1992, and then there are no missing values until 2012, when all are again missing. it’s probably clear by now that all values are missing until 1992 because Belarus only became an independent state in 1991. Likely there are lots of other countries in the dataset that have missing values for this reason. There’s some other weird stuff going on here: Belgium and Luxembourg did not separately report data during the period 1992-1999, and instead reported jointly. Then from 2000 until 2011 reported separately, so there we have lots of missing values. Then we have some countries that ceased to exist in their former state, e.g. Czechoslovakia after 1993 contains only missing values due to its dissolution into the Czech Republic and Slovakia. Similarly, USSR reports only missing values after 1991 when the USSR collapsed. And why more missing values from 2012 to 2015? Actually, the description of the data on the FAO web site says the data is from 1961 to only 2013, so it’s not surprising that 2014 and 2015 are empty. We will remove these years. We don’t know why there are more missing values in 2012 and 2013, so let’s also remove those: fbs_long &lt;- filter(fbs_long, Year &lt; 2012) #skim(fbs_long) What are we going to do??? This seems very messy! Let’s aim for a dataset that contains only country/year combinations where a country actually existed (i.e. there were not all NAs reported), and also where there is an entry for all 114 food items for each country year combination (by putting zeros in for no reported item). First we get a list of years in which each country does not contain all missing values. This we will use as a master list of years and countries to include in our analysis. We will not include year/country combinations where there were only missing values (the reason we need to be this specific is that we will soon turn the missing values into zeros). Let’s get that list of country/year combinations to include: country_year_not_all_missing &lt;- fbs_long %&gt;% group_by(Country, Year) %&gt;% summarise(keep = n() != sum(is.na(Food_Supply_Quantity))) %&gt;% filter(keep) %&gt;% select(-keep) %&gt;% ungroup() Does that look rather complicated? The difficult(ish) line is the summarise, in which we create a new variable keep that is TRUE or FALSE depending if all values of Food_Supply_Quantity are NA or not. The n() give the number of values, the sum(is.na(Food_Supply_Quantity)) gives the number of NAs, and the != asks if the two are not the same, and returns TRUE if so. The other lines should be possible for you to work out (though not necessarily easy). Note that there are 8,272 combinations of years and countries in the dataset. This is an important number. It is the number of data points we should have data for after we calculate the diversity of food available in each country in each year. Now we must decide what to assume when a country did not report a value for an item. We will assume that this means there was always zero supply of that food item, so the country did not bother ever including it, i.e. it’s really a zero. Hence we’re going to pad out the data so that all countries report on all 114 items, with zero Food Supply Quantity for the items they did not report. First we make a dataset the all combinations of Country, Year, and Item. It should have 182 * 51 * 182 = 1,058,148 rows. We use the quite lovely expand.grid function, which creates all possible combinations of the variables it’s given. We give it all the unique values of Country, Year, and Item, and it expands them to give all possible combinations. Each argument to expand.grid should be a name-value pair, and the name should be the same in the original data, to aid further operations: all_cases &lt;- expand.grid(Country = unique(pull(fbs_long, Country)), Year = unique(pull(fbs_long, Year)), Item = unique(pull(fbs_long, Item))) Super. This has 1,058,148 rows as expected. Now we want to only keep from this the country/year combinations for which we already found there were countries that existed. There are 8,272 of these and each should have 114 items, so we should get 943,008 observations. We do this with a left_join to keep only the cases of the join that have values in the first (left) dataset in the join: temp2 &lt;- left_join(country_year_not_all_missing, all_cases) ## Joining, by = c(&quot;Country&quot;, &quot;Year&quot;) ## Warning: Column `Country` joining character vector and ## factor, coercing into character vector We get a warning, and know that we should never ignore warnings. The warning is Column Country joining character vector and factor, coercing into character vector. This is caused because expand.grid automatically converts character variables to factors. We can stop this happening (by adding the argument stringsAsFactors = FALSE in our call to expand.grid and hopefully the remove the warning: all_cases &lt;- expand.grid(Country = unique(pull(fbs_long, Country)), Year = unique(pull(fbs_long, Year)), Item = unique(pull(fbs_long, Item)), stringsAsFactors = FALSE) temp2 &lt;- left_join(country_year_not_all_missing, all_cases) ## Joining, by = c(&quot;Country&quot;, &quot;Year&quot;) Perfect… and we have the expected number of 943,008 observations. Next we do another left join to add the food supply quantity data (in fbs_long) to the cases/observations we want to keep (in temp2) temp3 &lt;- left_join(temp2, fbs_long) ## Joining, by = c(&quot;Country&quot;, &quot;Year&quot;, &quot;Item&quot;) Good, we still have 943’008 observations. #skim(temp3) The number of missing values is now 139,252. Each of these is a case when a country reported values for some items in a year, but did not report values for others, and these others are given a value of NA. As we said above, we’re going to assume these are real zeros, and so we need to turn them all into zeros: fao_final &lt;- temp3 %&gt;% mutate(Food_Supply_Quantity = ifelse(!is.na(Food_Supply_Quantity), Food_Supply_Quantity, 0)) #skim(fao_final) No missing values now. And we have a dataset that we very well understand. Let’s check again though. We should have 114 items reported per country per year: items_per_country_per_year &lt;- fao_final %&gt;% group_by(Country, Year) %&gt;% summarise(num = length(unique(Item))) And we should have varying numbers of countries per year: countries_per_year &lt;- fao_final %&gt;% group_by(Year) %&gt;% summarise(num = length(unique(Country))) And the sum of the number of countries per year multiplied by 114 should equal 943,008: sum(pull(countries_per_year, num)) * 114 ## [1] 943008 Yes! Wow! Can you believe so much effort was needed to make a solid foundation of data! And we’re not even there yet… we still have wrangling work to do: we need to merge/join the FAO and the Polity datasets. But first… 8.6.3 Calculating our response variables The final step of preparation of the FAO data is to calculate our response variables. Our question is about food diversity so we need response variables that quantify this. We will use number of items available per year, and diversity of items available per year, where diversity accounts for the amount of each item as well as number of items using the Shannon index. fao_div &lt;- fao_final %&gt;% group_by(Country, Year) %&gt;% summarise(diversity = diversity(Food_Supply_Quantity, index = &quot;shannon&quot;), richness = sum(Food_Supply_Quantity&gt;0)) %&gt;% ungroup(fao_div) Excellent. We have 8,272 data points, exactly as we should. (We previously saw this was the number of combinations of country and year for which not all data was NA. I.e. the number of rows in country_year_not_all_missing). 8.7 Merge the two datasets The final step of data preparation is to merge the Polity and FAO data. One nasty issue we must deal with before we do the merge is to check the country names in the two datasets. It’s quite possible, even likely, there are instances of the same country having different names in the two. The following code gets the country names from each, looks for ones that appear in one and not the other, and vice versa, and writes these to csv files. pol_countries &lt;- unique(pull(pol, Country)) fao_countries &lt;- unique(pull(fao_div, Country)) in_pol &lt;- setdiff(pol_countries, fao_countries) in_fao &lt;- setdiff(fao_countries, pol_countries) write_csv(tibble(in_pol), &quot;data/in_pol.csv&quot;) write_csv(tibble(in_fao), &quot;data/in_fao.csv&quot;) Then it’s a matter of some manual spreadsheet work to find the matches, and to put these in a data file, and bring that matching back into R. You can get the country matching data file countryname_map.csv from http://insightsfromdata.io. countryname_map &lt;- read_csv(&quot;data/countryname_map.csv&quot;, locale = locale(encoding = &#39;ISO-8859-1&#39;)) ## Parsed with column specification: ## cols( ## in_fao = col_character(), ## in_pol = col_character() ## ) Then we use a left_join to match the Country names in the Polity data to the those in the mapping dataset, which in effect adds a variable to the polity data that is the name of the countries in the FAO data. We then replace the Country variable with one that contains the FAO names if they exist, otherwise the Polity name: pol1 &lt;- left_join(pol, countryname_map, by =c (&quot;Country&quot; = &quot;in_pol&quot;)) %&gt;% mutate(Country = ifelse(is.na(in_fao), Country, in_fao)) %&gt;% select(-in_fao) #skim(pol1) And let’s check the effect of this renaming of countries on the number of NAs. Here is the merge of the FAO and Polity data on the original Polity country names: fao_pol &lt;- left_join(fao_div, pol) ## Joining, by = c(&quot;Country&quot;, &quot;Year&quot;) sum(is.na(pull(fao_pol, Polity2))) ## [1] 2607 We get 2,607 missing polity values. And here after the renaming: dd1 &lt;- left_join(fao_div, pol1) ## Joining, by = c(&quot;Country&quot;, &quot;Year&quot;) sum(is.na(pull(dd1, Polity2))) ## [1] 1819 Now we have 1,819 missing polity values. Fewer, but still quite a lot. These are countries in the FAO data that we couldn’t find in the Polity data. This is a bit unsatisfactory, but we’ll go with what we have. By the way, some of these missing values are despite the country being in the Polity data, e.g. there were no Polity records for Afghanistan from 1979 to 1988, but there were for other years. One last thing: let’s remove the NAs from the dataset: fao_pol &lt;- na.omit(fao_pol) 8.8 Tidying up We have a lot of objects in R’s brain. We only need one: fao_pol. We can remove all the other variables. We don’t need to run all the code above every time we do an analysis. In this situation we can save the fao_pol dataset, remove everything from R’s brain using rm(list = ls()) or by clicking the little broom icon in RStudio, and load it again: saveRDS(fao_pol, &quot;data/fao_pol.Rdata&quot;) rm(list = ls()) fao_pol &lt;- readRDS(&quot;data/fao_pol.Rdata&quot;) 8.9 Shapes As usual we look at the distribution of our variables. First the distribution of number of food items available in each country, across all countries and all years. The code for this you are quite familiar with by now, using ggplot and geom_histogram (Figure 8.3: ggplot(fao_pol, aes(x = richness)) + geom_histogram(bins = 10) FIGURE 8.3: Frequency distribution of richness of food items across all countries and years. Some countries in some years have only between 30 and 40 food items available, others have over 90. This is a large difference. The most common number is around 80. The distribution is somewhat left skewed, with a longer tail of smaller values. The distribution is not, however, horribly asymmetric. And looking at the distribution of diversity of food item quantities with the following code (Figure 8.4: ggplot(fao_pol, aes(x = diversity)) + geom_histogram(bins = 10) FIGURE 8.4: Frequency distribution of diversity of food items across all countries and years. The diversity distribution is quite similar to the richness distribution, with a bit of left skew, but not too much. The values of diversity are rather arbitrary—not as intuitive as richness. Higher values indicate some combination of high richness and high evenness in the quantities of the items. And looking at the distribution of the Polity variable with the following code (Figure 8.5: ggplot(fao_pol, aes(x = Polity2)) + geom_histogram(bins = 10) FIGURE 8.5: Frequency distribution of Polity2 all countries and years. Is this what you were expecting? A rather bimodal distribution with most countries either very autocratic (low scores) or very democratic (high scores). Perhaps this in itself is an interesting pattern, though political scientists may find it obvious. Probably the creators of the Polity2 data have commented on it. 8.10 Relationships First we’ll look at the relationship between richness and diversity. We might imagine that they’re quite closely associated since 1) diversity includes richness, and 2) their distributions look quite similar. By now the following code to make a scatter plot of richness against diversity should be familiar, though we add some transparency to the points since lots lie on top of each other (Figure 8.6: ggplot(fao_pol, aes(x = richness, y = diversity)) + geom_point(alpha = 0.05) FIGURE 8.6: Relationship between the two response variables, richness of items and diversity of items, across all countries and years. Not quite as close a relationship as we expected. There is certainly enough spread that we could get different insights from looking at each of the variables separately… they don’t have to tell the same story. And now, drum-roll, for the answer to our question. Is there a relationship between the political system of a country and the richness of food available for human consumption. Again, by now the R-code is hopefully no challenge for you (and gives Figure 8.7): ggplot(fao_pol, aes(x = Polity2, y = richness)) + geom_point(alpha = 0.05) FIGURE 8.7: Richness of food items available versus Polity score, across all countries and all available years. What do you think? Is there a relationship? And how confident are you that the relationship is not just the result of chance? Before we conclude, let’s look at the relationship for diversity of food items (Figure 8.8). ggplot(fao_pol, aes(x = Polity2, y = diversity)) + geom_point(alpha = 0.05) FIGURE 8.8: Diversit of food items available versus Polity score, across all countries and all available years. Well, to our eyes, it certainly looks like the countries with high Polity scores have higher richness and diversity of food available than the countries with low Polity scores. There is also a lot of variation, such that any country (regardless of Polity) can have nearly the highest or lowest observed diversity of richness. We are being a little bit naughty, however. Each country can be contributing multiple data points to these graphs, one for each year it is present in the dataset. Countries with more years will tend to influence our conclusions more than those with fewer years. And the different years of data from one country are not independent… they are repeated measures. Let’s remove this non-independence and differential contributions of different countries in one of the crudest (though very simple and effective) ways—by getting the average value for each country. The group_by, summarise we use should be familiar: dd_year &lt;- fao_pol %&gt;% group_by(Country) %&gt;% summarise(Polity2 = mean(Polity2), richness = mean(richness), diversity = mean(diversity)) We have gone from a dataset with 5,665 observations to one with 133, one data point for each country in the data. Here’s the code for the graphs of Polity score and richness/diversity for this country level data: ggplot(dd_year, aes(x = Polity2, y = richness)) + geom_point() FIGURE 8.9: Richness of food items available versus Polity score; average value for each country. ggplot(dd_year, aes(x = Polity2, y = diversity)) + geom_point() FIGURE 8.10: Diversity of food items available versus Polity score; average value for each country. The country level data (Figures 8.9 and 8.10) appear to show stronger evidence of a positive relationship between polity score and richness/diversity of food available, with more democratic countries (higher polity scores) having more diversity of food available than less democratic ones. Let’s look at the data another way, by categorising the Polity score. To do this we make a new variable using mutate and use the cut function to cut the Polity scores into five categories, and we name the categories: dd_year &lt;- dd_year %&gt;% mutate(Polity2_cat = cut(Polity2, breaks = seq(-11, 11, length = 6), labels = c(&quot;Very autocratic&quot;, &quot;Quite autocratic&quot;, &quot;Neutral&quot;, &quot;Quite democratic&quot;, &quot;Very democratic&quot;))) Here, we will only show the figure for the richness of food items (Figures 8.9) and not diversity (you can make that graph yourself): ggplot(dd_year, aes(x = Polity2_cat, y = richness)) + geom_boxplot() + geom_beeswarm() + ylab(&quot;Dietary richness\\n[number of food items]&quot;) + xlab(&quot;Type of political system&quot;) + coord_flip() FIGURE 8.11: Frequency distribution of diversity of food items across all countries and years. This tells more or less the same story, though the figure might be considered a bit nicer as it shows the meaning of the Polity score. There is an interest pattern we didn’t note before, however: that the very autocratic countries seems to have somewhat higher food diversity than we might expect—quite similar to the countries with Neutral polities. There are relatively few of these very autocratic countries, however, and one of them (China) has the highest food richness of any country! 8.11 Wrapping up Did you notice that we spent about 20 pages preparing the data, and then only ten or so (mostly graphs) looking at shapes and relationships? We spent much more time and effort making sure we knew the data inside out, that we had prepared it appropriately, and it was a solid foundation for the question we wanted to answer. And that most of the new practices and R code you experience were in that data preparation phase, and not in the analysis part. That said, we were rather shallow in the analysis part. There is much much more we could have looked at. For example, we could look at relationships within countries across time, especially if there is a big shift in polity. Does the shift in polity precede a shift in diversity of food availability? There are also lots of other explanatory variables we could have included in our analysis, for example national GDP, geographical location, and so on. Lots of this data is freely available on the internet. A simply fantastic place to get lost in such data and visualisation is the Our World in Data website. Other things you could think about analysing, for which data are available (though we couldn’t say exactly where): Biodiversity Latitudinal gradient Species (country) area relationship GDP diversity relationship. Causality by time lag relationships. FAO Macroeconomic statistics (e.g. GDP by country by year) (http://www.fao.org/faostat/en/#data) FAO Population data (e.g. population size by country by year) (http://www.fao.org/faostat/en/#data) World Bank, e.g. country land area https://data.worldbank.org/indicator/AG.LND.TOTL.K2 Maybe: SDG indicators: http://data.un.org/Explorer.aspx?d=SDGs 8.12 Some questions Go to the Insights companion website http://insightsfromdata.io and have a go at the questions and exercises for this chapter. "],
["WFD-3.html", "Chapter 9 Are more diverse diets better? 9.1 Going to the next level 9.2 Introduction to the study and data 9.3 What type of response variable? 9.4 A little preparation 9.5 Acquire the dataset 9.6 Import the dataset 9.7 Checking the import worked correctly 9.8 Cleaning and tidying 9.9 Shapes 9.10 Relationships 9.11 Wrapping up 9.12 Some questions", " Chapter 9 Are more diverse diets better? 9.1 Going to the next level This case study includes a bit more complexity than the first one and covers a few new topics in R and in general. The complexity mainly occurs in the calculations we do to obtain the response variables (i.e. the variables we examine to answer our biological question). The calculations involve some conceptually challenging manipulations, and the corresponding pipelines of dplyr functions will at first seem complex and daunting. It’s fine to be concerned, even a bit stressed, by this complexity. If you feel so, just take a break, have a chat with friends, and while doing that think about how we only travel great distances and climb high peaks by taking one small step at a time. The same applies to what seem like complex and daunting tasks in getting insights from data. It’s amazing how far we get taking one step at a time. When we show you what seems like a complex task, like a complex pipeline of functions, break it down into its component steps. Let’s take a first step by introducing the case study and data that was collected. Again: as you work through this chapter, try following along with the workflow/checklist on this web page. 9.2 Introduction to the study and data The data comes from a study of how the number of available prey species for a predator consume affects the stability of the predator population dynamics. The study was designed to address the hypotheses that more pathways of energy flow to a predator (i.e. more prey species) would stabilise the predator population dynamics, 1) by increasing the abundance of the predator, 2) by reducing how much it varies, and 3) by delaying extinction. The experiment involved three prey species and one predator. One, two or three prey species were present, with every combination of each. The experimental units were small jars of nutrient containing liquid and the predator and prey species were aquatic microbes feeding on bacteria also present in the liquid. The small size of the prey and predators (about 20 to 400 microns) means that in just a few weeks individuals can reproduce many times, and also die. There were five replicates of each of the seven prey species compositions (so 35 experimental units). During the experiment the data was written onto paper, then at a later date the data was entered into a spreadsheet. The data in the spreadsheet was checked for errors, by comparing it with the original paper copy of the data. The data recording and entry was done with tidiness and cleanliness in mind, so tidying and cleaning will be minimal. The data file contains the data exactly as it was recorded on the paper data sheet, and after data entry was double checked to correct any errors. Looking at the dataset in Excel or something similar, you will see the following variables: day - the day of the experiment the observation in the row belongs to. count - the number of individuals counted in the sample; used to calculate density per ml. Counts were made by eye, looking down a microscope. w1 - the volume of liquid in ml removed from the community for sampling abundance. Used to calculate density per ml. w2 - the volume of diluent added to the volume sampled, plus the volume sampled. Used to calculate density per ml. w3 - the volume of the sub-sample taken of the mixture of diluent and sample removed. Used to calculate density per ml. species - a numeric code for the species that the observation in the row belongs to. prey.richness - the number of prey species added to the jar. prey.composition - a number that identifies the combination of prey species added to the jar. replicate - a replicate identifier, unique within prey composition. jar - a number that uniquely identifies each experimental unit. How does the data measure up to the features of data we mentioned in the first chapter? Number of variables. Not too many. Really there are only two or three explanatory variables, and one response variable (population size, though we will derive three separate response variables). Certainly we are not up in the range of tens of explanatory variables. And because this was an experiment, we only have variables already thought to be important. Number of observations. Not too many. Just 35. Our ability to detect patterns is going to be low. If and how many of the variables describe experimental manipulations. Yes the data are from an experiment. Prey composition was manipulated, and so therefore was prey richness. So we know that any apparent relationships between the predator population and the prey composition is a result of a causative relationships. I.e. if we alter prey composition and only prey composition (as is the case here) and see changes in the predator population then we know that prey composition caused those changes. The amount of correlation among the variables. There is no correlation to speak of; this is not so uncommon in an experiment. How independent are the observations. Here we need to be a bit careful. There were 35 experimental units, so there should be 35 data points in our analyses. Multiple samples through time were taken from each experimental unit, however—we have repeated measures. We will take care of this, and not fall into a trap of trying to interpret patterns in graphs with lots of non-independent data points. 9.3 What type of response variable? This question is worth asking at the beginning of a study. There were, in fact, three main response variables used in this study and these correspond to the three hypotheses mentioned above. I.e. there is one response variable for each of the three hypotheses/questions. These response variables were: 1) the population size of the predator population, 2) the temporal variability of the predator population size, and 3) the amount of time for which the predator population persisted. Each of these is an component/influence on the stability of the predator population. Each will have to be calculated from the time series of predator population density (number of individuals predators per ml) in each replicate. First though we will have to calculate population density from count, w1, w2, and w3, because during the experiment the volume of liquid in which the number of individuals of each species was counted varied (i.e. w1, w2, and w3 are not constant). The reason for this variation is that dilution is required when populations are very dense, otherwise the dense swarm of individuals would be near impossible to count. 9.4 A little preparation Make a new folder for this case study, and in it a folder called data (this will contain any datasets for this case study/project). In RStudio create an RStudio project and save it in the project folder (not the data folder). Close RStudio and double click on the project file to re-open RStudio. Create a new R script file and load the libraries we will use: ## Load the libraries we use library(dplyr) library(ggplot2) library(readr) library(stringr) library(lubridate) library(skimr) library(tidyr) library(forcats) Install the forcats library if you have not already done so, otherwise library(forcats) will not work. Look at the Packages section of the Getting Acquainted chapter if you need help with installation. 9.5 Acquire the dataset Get the data file dileptus expt data.csv from the dryad repository associated with the publication about the data (make sure you get version 2 of the dataset). The dataset is stored on dryad in comma separated value (csv) format. Put the file in your data folder for this project. 9.6 Import the dataset Import the dataset using the read_csv() function from the readr package. Make sure you opened RStudio by clicking on your project file for this case study (or switch to the RProject in the top right of the RStudio window. This will ensure RStudio is looking at the correct folder, and that the relative path used before the file name will be correct: dd &lt;- read_csv(&quot;data/dileptus_predator_prey_data.csv&quot;) ## Parsed with column specification: ## cols( ## day = col_double(), ## count = col_character(), ## w1 = col_double(), ## w2 = col_double(), ## w3 = col_double(), ## species = col_double(), ## prey.richness = col_double(), ## prey.composition = col_double(), ## replicate = col_double(), ## jar = col_double() ## ) Great, we didn’t get an error. The read_csv() function has done two things. It read in the data and the dd &lt;- assigns the data to a new object called dd (you could give it a name other than dd if you wish). The read_csv() function also gives a summary of what it found. 9.7 Checking the import worked correctly Now we should check some basic things about the imported data. Let’s start by checking if it has the correct number of rows and variables, and if variables are the expected (i.e. correct type). We can look at these features of the imported data in many ways. One useful method is to type the name of the data object in the Console and press enter: dd ## # A tibble: 806 x 10 ## day count w1 w2 w3 species prey.richness ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2 52 0.356 6.32 0.322 1 1 ## 2 2 0 0.356 1 1 4 1 ## 3 2 66 0.360 6.56 0.323 1 1 ## 4 2 0 0.360 1 1 4 1 ## 5 2 21 0.303 5.67 0.0843 2 1 ## # … with 801 more rows, and 3 more variables: ## # prey.composition &lt;dbl&gt;, replicate &lt;dbl&gt;, jar &lt;dbl&gt; We are told the object is A tibble: 806 x 10. This is what we expect if we look at the datafile. All looks good so far then. Not all is well, however, as some of the variables that should be numeric are character, and vice versa. We expect count to be numeric. Looking that the count variable we see some entries are a full stop. This is because the dataset was originally made to be used by software (SAS) which by default uses the full stop to indicate a missing value. So we need to repeat the import the a full stop as the missing value indicator: dd &lt;- read_csv(&quot;data/dileptus_predator_prey_data.csv&quot;, na = &quot;.&quot;) ## Parsed with column specification: ## cols( ## day = col_double(), ## count = col_double(), ## w1 = col_double(), ## w2 = col_double(), ## w3 = col_double(), ## species = col_double(), ## prey.richness = col_double(), ## prey.composition = col_double(), ## replicate = col_double(), ## jar = col_double() ## ) Good, now count is an integer type variable. 9.8 Cleaning and tidying 9.8.1 Recode some names We expect the species and the prey.composition variables should probably be character variables. Indeed, they really should be characters, but they appear to be integers. Always use the proper word when you have one —don’t ever use codes like this (the person who entered this data was probably not thinking about this carefully enough! Or was constrained by time. Or both.). Let’s fix this by replacing the species code numbers with their names (we found the correct names for each code in the lab book for this experiment, it is not in the dataset): dd &lt;- mutate(dd, species = recode(species, &quot;1&quot; = &quot;Colpidium&quot;, &quot;2&quot; = &quot;Collodictyon&quot;, &quot;3&quot; = &quot;Paramecium&quot;, &quot;4&quot; = &quot;Dileptus&quot;)) Here we do a mutate to make a new version of the species variable, and the recode function to change the numbers to the species names. We first give recode the variable to work on (species) and then tell it to change each 1 to “Colpidium” and so on for the other numbers. Next we work on the prey.composition variable. In fact, we’re just going to throw it away as it is redundant, because we can construct it from the species variable. Let’s do that. While we’re at it, let’s also get the prey richness from the other columns, rather than use the existing imported prey.richness column. The first thing we’ll do is make a new dataset containing these two new variables, community_composition and prey_richness, and we’ll get these variables for each prey composition and replicate combination: comm_comp &lt;- dd %&gt;% group_by(prey.composition, replicate) %&gt;% summarise(community_composition = paste(unique(species), collapse = &quot;, &quot;), prey_richness = length(unique(species)) - 1) Let’s break this down. We’re doing a group_by—summarise. The group_by is by prey.composition (seven compositions) and replicate (five replicates), so we’re expecting 7 * 5 = 35 rows in this new dataset. Then in the summarise we create in the first line the new community_composition variable, and in the second the new prey_richness variable. To make the new community_composition variable we paste together the species present in the group (composition by replicate combination); we use unique to remove repeats of the species names, and collapse to make the species names in a group be pasted together into one string. Take a look at the new community_composition variable, and then look again at the code above and the description of how we just made this new prey_composition variable. select(comm_comp, community_composition) ## Adding missing grouping variables: `prey.composition` ## # A tibble: 35 x 2 ## prey.composition community_composition ## &lt;dbl&gt; &lt;chr&gt; ## 1 1 Colpidium, Dileptus ## 2 1 Colpidium, Dileptus ## 3 1 Colpidium, Dileptus ## 4 1 Colpidium, Dileptus ## 5 1 Colpidium, Dileptus ## # … with 30 more rows We also make the new prey_richness variable. The code was prey_richness = length(unique(species)) - 1. The length function tells us the number of unique (because we used the unique function) species, and we subtract the 1 to remove the 1 added by the predator species being present. Next we do more or less the same thing to get a new variable prey_composition. This will be the same as the community composition variable we just made, but without the predator species name included. The code is more or less the same, but with the predator (Dileptus) rows filtered out before the summarise. prey_comp &lt;- dd %&gt;% group_by(prey.composition, replicate) %&gt;% filter(species != &quot;Dileptus&quot;) %&gt;% summarise(prey_composition = paste(unique(species), collapse = &quot;, &quot;)) The final thing to do is to add the new variables to the original dataset. We do this by merging (joining) the datasets with the new variables into the original dataset, one then the other, then we clean a bit by removing the old prey.composition and prey.richness variables, and by removing the comm_comp and prey_comp datasets which were only of temporary use. dd &lt;- full_join(dd, comm_comp) %&gt;% full_join(prey_comp) %&gt;% select(-prey.composition, -prey.richness) ## Joining, by = c(&quot;prey.composition&quot;, &quot;replicate&quot;) ## Joining, by = c(&quot;prey.composition&quot;, &quot;replicate&quot;) rm(comm_comp, prey_comp) It’s not necessary to remove variables that we’re not interested in using anymore, but is often a good idea to do so. It can prevent us accidentally using them, or just from getting confused about what they are and if they are in fact important when we come back to our work after a gap of a few months, as often happens. If we have a rather large dataset, keeping only the essential variables can usefully reduce the size of the dataset. 9.8.2 Make the prey_composition variable a factor with specific order What on earth did that mean? So far we have not mentioned factors. These are a type of variable that contains words (a bit like character variables) but in which the different words/categories are referred to as levels and have an explicit order. This order affects how some things are done in R, and this is why we want to determine the specific order of the levels of the prey_composition variable. For example, when we make a graph with prey_composition on the x axis we would like the three single-species prey compositions first on the left, then the three two-species prey compositions, then the three-species prey composition on the right. Before we do this, look at the prey_composition variable in its current state: select(dd, prey_composition) ## # A tibble: 806 x 1 ## prey_composition ## &lt;chr&gt; ## 1 Colpidium ## 2 Colpidium ## 3 Colpidium ## 4 Colpidium ## 5 Collodictyon ## # … with 801 more rows It is a character variable (&lt;chr&gt;). If we try to see what the levels of this variable are, we get NULL; there are no levels: levels(pull(dd, prey_composition)) ## NULL To change this to an ordered factor type variable, we use the fct_relevel function from the forcats package inside a mutate change the prey_composition variable: dd &lt;- mutate(dd, prey_composition = fct_relevel(prey_composition, &quot;Collodictyon&quot;, &quot;Colpidium&quot;, &quot;Paramecium&quot;, &quot;Colpidium, Collodictyon&quot;, &quot;Colpidium, Paramecium&quot;, &quot;Collodictyon, Paramecium&quot;, &quot;Colpidium, Collodictyon, Paramecium&quot;) ) Now let’s see how the prey_composition variable looks: select(dd, prey_composition) ## # A tibble: 806 x 1 ## prey_composition ## &lt;fct&gt; ## 1 Colpidium ## 2 Colpidium ## 3 Colpidium ## 4 Colpidium ## 5 Collodictyon ## # … with 801 more rows levels(pull(dd, prey_composition)) ## [1] &quot;Collodictyon&quot; ## [2] &quot;Colpidium&quot; ## [3] &quot;Paramecium&quot; ## [4] &quot;Colpidium, Collodictyon&quot; ## [5] &quot;Colpidium, Paramecium&quot; ## [6] &quot;Collodictyon, Paramecium&quot; ## [7] &quot;Colpidium, Collodictyon, Paramecium&quot; Excellent. The variable is now a factor (&lt;fct&gt;) and we can see its levels. Do not worry if it’s not immediately apparent why we made this variable an ordered factor—we emphasise the point a couple of times below where the benefits of this are very clear and obviously desirable. 9.8.3 Fix those variable names We don’t have any spaces, brackets, or other special characters in variable names, and there is no date variable we need to correctly format. Great – the person who entered the data did something right! 9.8.4 Calculate an important variable When we first introduced the data, we identified four variables that would be used to calculate the number of individual organisms per ml. We must do this because different volumes and dilutions of liquid were counted at different times in the experiment. Standardising the abundance measures to number of individuals per ml will also allow interoperability with data from other studies that have also been standardised. Look at the definitions of the four variables count, w1, w2, and w3 and see if you can figure out how to convert the count to per ml. It’s not easy, but not too difficult perhaps. Really, give it a go. The challenge of getting insights from data is in large part about being able to solve problems like these. After solving them on paper we can then move to R to implement the solution. Start by simplifying the problem. Imagine we made no dilution of w1 such that w2 = w1 and counted all of w1 such that w3 = w1. In effect we just took the volume w1 from the experimental culture and counted the number of individuals in it. If w1 is 1 ml, then then the number of individuals counted (in variable count) is per ml. If w1 is 0.5ml, we need to multiple the count by 2 (i.e. divide by 0.5) to get to per ml. If w1 is 2 ml we need to divide by 2 to get to per ml. In this case we could use the formula count / w1 to convert to number of individuals per ml. Now think about if we sampled 1 ml (w1 = 1 ml), added 1 ml of diluent (w2 = 2 ml), and then counted 1 ml of that diluted sample (w3 = 1). We have diluted by a factor of 2 (w2 / w1 = 2) and counted 1 ml of that dilution, so we need to multiply the count by 2 to get to per ml. That is, we multiply the count by the dilution factor to get the count per ml (so long as w3 = 1 ml). Finally, think about if we count only 0.1 ml of the diluted sample (w3 = 0.1 ml). That is a tenth of a ml, so we need to multiply by ten (or divide by 0.1). That is, we divide by w3 to correct to count per ml when w3 is not 1 ml. Putting these parts together we see that we multiply by the dilution factor w2/w1 and then divide by the volume counted (w3). We, of course, add the new dens_per_ml variable and calculation using the mutate function: dd &lt;- mutate(dd, dens_per_ml=count*w2/w1/w3) Super-simple! Now we have a standardised, comparable, and interoperable measurement of population size of each species. Actually, the dataset as it was entered was done so to make this calculation work very easily. In particular, w2 is very purposefully the sum of the sampled volume and the diluent, and is not just the volume of the diluent. Furthermore, if there was no dilution, and the count was made of w1 we might have entered NA for w2 and w3 since they did not exist. Instead, the both w2 and w3 are set to 1 in this case, which means they have no effect in the calculation (multiplication and division by 1 has no effect). This is an example of designing and planning before and during data entry with downstream calculations in mind. (The researcher responsible for the dataset can’t take credit for this very useful forethought—he received great advice from a colleague!) 9.8.5 Remove NAs When we imported the data we noticed some values of count were missing (NA). The reason these particular counts are NA while there are still values of w1, w2, and w3 is a bit of a puzzle. One might imagine that the NA should really be a zero. In fact, what the researcher did was to sometimes enter NA after a species had become apparently extinct, because after not seeing individuals of a species for several days there was no attempt to observe that species, even though a sample was taken to observe any other still extant species in that community. So these NA values are when a species has gone extinct, and so could be zero, but since no count was attempted, it was appropriate to enter missing value NA. A consequence of all that is that we can remove all observations/rows containing an NA. We can do this with a filter so that we remove only rows with an NA in the count variable: temp1 &lt;- filter(dd, !is.na(count)) nrow(temp1) ## [1] 680 Or remove we can remove rows with and NA in any of the variables: temp2 &lt;- na.omit(dd) nrow(temp2) ## [1] 680 Since the number of remaining rows is the same for both approaches we know there we no observations in which a variable other than count contained an NA when the count variable did not. So we’re safe doing it either way. Let’s overwrite dd with a new version with no NA values. dd &lt;- na.omit(dd) 9.8.6 Checking some specifics We should check some feature of the dataset specific to the study. Which days were samples taken on? To find this we pull the day variable from the tibble dd and get its unique values: unique(pull(dd, day)) ## [1] 2 4 6 8 10 12 14 16 18 20 Samples were taken every two days from day to until a maximum of day 20. So we expect a maximum number of counts of species abundances in a particular replicate to be 10 multiplied by the number of species in a replicate community. I.e. the maximum number of counts in a community with two prey species and the predator (recall that all communities contained the predator) will be 30. Maximum number of counts will be 20 for communities with only one prey species. Note that this is the maximum because we know some values of count were NA. Let’s now get the number of counts for each replicate community, and while we’re at it, the last day sampled for each replicate. We do this with a group_by %&gt;% summarise pipeline, grouping by the jar and prey_composition variables. We include the prey_composition variable in the grouping so that we have it to refer to in the resulting summary dataset, and place it first in the group_by function so that the summary dataset is arranged by this variable. temp1 &lt;- dd %&gt;% group_by(prey_composition, jar) %&gt;% summarise(num_samples = n(), max_day = max(day)) temp1 ## # A tibble: 35 x 4 ## prey_composition jar num_samples max_day ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Collodictyon 3 11 12 ## 2 Collodictyon 4 11 12 ## 3 Collodictyon 18 14 14 ## 4 Collodictyon 19 14 14 ## 5 Collodictyon 20 4 4 ## # … with 30 more rows Notice how the dataset is arranged in the same order as the levels of the prey_composition variable that we specified when we made this variable an ordered factor type variable. The order is as we planned. If we had not made the prey_composition variable into an ordered factor, R would have chosen its preferred arrangement/ordering, and often this is not our preference. You can see R’s preferred arrangement if you replace prey_composition with as.character(prey_composition) in the group_by. Looking at the summary tibble temp1 (remember you can use View(temp1) or click on temp1 in the Environment tab) we see that each of the prey compositions has five replicates, exactly as expected. And, also as expected, the maximum number of samples is 10 times the number of species, though often this maximum was not realised. We also see that some communities were sampled for longer than others (we assume this is due to sampling ceasing when all species went extinct). We can have R confirm the number of replicates per prey composition with a quick group_by %&gt;% summarise pipeline working on temp1: temp1 %&gt;% group_by(prey_composition) %&gt;% summarise(number_of_replicate = n()) ## # A tibble: 7 x 2 ## prey_composition number_of_replicate ## &lt;fct&gt; &lt;int&gt; ## 1 Collodictyon 5 ## 2 Colpidium 5 ## 3 Paramecium 5 ## 4 Colpidium, Collodictyon 5 ## 5 Colpidium, Paramecium 5 ## # … with 2 more rows We can also get the number of counts made of each species by using the same code with species added as a grouping variable: temp2 &lt;- dd %&gt;% group_by(prey_composition, jar, species) %&gt;% summarise(num_samples = n(), max_day = max(day)) temp2 ## # A tibble: 95 x 5 ## prey_composition jar species num_samples max_day ## &lt;fct&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Collodictyon 3 Collodict… 5 10 ## 2 Collodictyon 3 Dileptus 6 12 ## 3 Collodictyon 4 Collodict… 5 10 ## 4 Collodictyon 4 Dileptus 6 12 ## 5 Collodictyon 18 Collodict… 7 14 ## # … with 90 more rows Here we see that two of the microcosms had only two samples taken. These are the ones in which the last day sampled was day four (confirm this for yourself if you wish; View(temp2) is useful for this). All this might seem like overkill, particularly if we imagine that we had collected and entered the data into the spreadsheet. Surely then we would know all this, and therefore not have to check it? It’s not overkill, however. It’s about making efforts to ensure that we and R are in perfect agreement about the nature and contents of the data. Reaching such agreement is absolutely essential, and often involves resolving differences of opinion by highlighting hidden (and potentially dangerous) assumptions made by us and/or by R about the nature and contents of the data. By taking such efforts we are investing in the foundations of our insights. We need solid foundations for reliable, robust, and accurate insights. 9.8.7 A closer look at the data We so far have not looked at the species abundances and have not yet calculated the three required response variables. Let’s begin by looking at the species abundances, and do this by plotting the dynamics of the species in each microcosm. Now you will begin to see the power, elegance, and amazingness of ggplot. We will map the log 10 transformed abundance data onto the y-axis. We will map the day variable onto the x-axis. We will plot the data as points and lines (so use geom_line and geom_point) and we will map the species variable onto the colour of the points and lines. And we will make a grid of facets using facet_grid with rows of the grid corresponding to prey composition and columns for the replicates. Translating that into ggplot terms we get the following code (producing Figure 9.1): dd %&gt;% ggplot(aes(x = day, y = log10(dens_per_ml), col = species)) + geom_point() + geom_line() + facet_grid(prey_composition ~ replicate) FIGURE 9.1: Population dynamics observed during the experiment. Notice the order of the rows—it is from top to bottom the order we specified when we made the prey_composition variable an ordered factor. So ggplot is using this order. If you like to see what the order would have been if we hadn’t specified it, replace prey_composition with as.character(prey_composition). The dynamics in Figure 9.1 are those shown in figure 1 of the original publication. Everything seems reasonable, though I (Owen) wish I’d recorded more information about why I stopped sampling the microcosms when I did. I think I still have my lab books from this experiment somewhere inaccessible like my parents loft but haven’t had the chance to get them. The predator (Dileptus) does not seem to grow well when Collodictyon is the only available prey species, but grows very well on and decimates Colpidium, after which the predator appears to go extinct and then the Colpidium population recovers. We can also notice that the predator population persists to the end of the experiment on day 20 only when all three prey species are present. It is probably worth emphasising that 20 days corresponds to around 20 generations of these organisms; this is a lot of time for birth and death to affect population abundances (if each individual divided into two daughters each day, the population would increase in size by a factor of 2^20, i.e. grow to be 1 million times larger). We could again use the skim() function to take a look at the data more closely. skim(dd) ## # A tibble: 126 x 6 ## variable type stat level value formatted ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 day numeric missing .all 0 0 ## 2 day numeric complete .all 680 680 ## 3 day numeric n .all 680 680 ## 4 day numeric mean .all 8.79 8.79 ## 5 day numeric sd .all 5.00 5 ## # … with 121 more rows 9.8.8 Calculate the three response variables There are three response variables corresponding to the three hypotheses about why increased prey diversity might increase predator population stability: Predator population abundance. Predator population variability. Predator population persistence time. 9.8.8.1 Calculating predator (Dileptus) abundance You might be thinking “we already have predator abundance”, and you’d be correct. We have estimates of the number per ml on each of the sample days. The issue that we now have to deal with, and solve somehow, is that of independence of observations. When we take repeated measures of the same thing, here the same predator population in the same experimental community, the repeated measures are not independent, and measures closer together in time are less independent than are those further apart in time. There are some rather complex and perhaps sophisticated ways of accounting for the non-independence in repeated measures, but they are beyond the scope of what we want to cover. Instead we are going to use a rather crude, but also quite valid solution. That is to use the maximum predator abundance in each of the experimental unit (communities). There are 35 experimental communities, so we expect to have 35 estimates of average predator abundance. To make the calculation in R we will use a filter %&gt;% group_by %&gt;% summarise pipeline. We filter to keep only the observations of the predator (Dileptus), then group the data by prey_richness, prey_composition, and replicate, then calculate two summary values. The first summary value, named by us pred_max_dens is the maximum density of the predator population observed in each experimental community. The second variable calculated, named by us all_zero is TRUE if all the predator densities were zero, or is otherwise FALSE. Here is the R code: pred_max_dens &lt;- dd %&gt;% filter(species == &quot;Dileptus&quot;) %&gt;% group_by(prey_richness, prey_composition, replicate) %&gt;% summarise(max_dens = max(dens_per_ml), all_zero = sum(dens_per_ml &gt; 0) == 0) As expected, the resulting tibble contains 35 observations and four variables. Lovely. We will look at the values after we calculate the other two response variables. In the group_by we included a redundant grouping variable prey_richness. It is redundant in the sense that we would have got the same resulting tibble if we had not included it, the only difference being that the resulting tibble would not have contained the prey_richness variable. We will often find ourselves including redundant variables in a group_by because we would like to them to appear in the resulting tibble so we can use them later. We calculated the maximum of the predator abundance, but could have chosen the mean, median, or the geometric mean, or harmonic mean. It is really important to recognise that the choice of mean here is quite arbitrary, and so introduces an element of subjectivity into our journey from data to insights. Such subjectivity is a rather common feature of this journey. We must make sure our insights are robust to subjective decisions about how to reach them. We can do this by looking at whether the insights are sensitive to changes in these decisions. This is quite different, however, from selecting the decision that gives a result we might desire, which would clearly be a totally inappropriate practice. 9.8.8.2 Calculating predator (Dileptus) population variability We will use the coefficient of variation as the measure of predator population variable. The coefficient of variation, or CV for short, is the standard deviation of the abundances divided by the mean of the abundances. What values might we expect? Well, one thing to expect is some undefined values, since we know that in six of the communities there were no predators observed. The mean will therefore be zero, and the result of division by zero is undefined. So we expect the CV to be NaN for the six communities in which the predator was never observed. The R code is very similar to that used in the previous section to calculate maximum predator abundance: pred_CV &lt;- dd %&gt;% filter(species == &quot;Dileptus&quot;) %&gt;% group_by(prey_richness, prey_composition, replicate) %&gt;% summarise(CV = sd(dens_per_ml) / mean(dens_per_ml), all_zero = sum(dens_per_ml &gt; 0) == 0) Looking at the data (e.g. with View(pred_CV) shows us that indeed there are six NaN values of CV. We will look at the other CV values after we calculate the third response variable. Congratulations if you noticed that we could have calculated maximum abundance and CV of abundance in the same summarise. This would have been more efficient, in the sense that we would have had less code. It would also have been safer since then we could not have accidentally done something different (e.g. a different grouping) for the two. 9.8.8.3 Calculating predator (Dileptus) persistence time Before we do, what type of variable is this? One characteristic is that it is “time to event” data… we are observing the amount of time taken for a particular event (here extinction) to occur. The values can’t be negative. They could be continuous, but in this case are not, because we sampled only every other day. Hence the variable is discrete numbers. We will go into a bit more detail about this nature of values of persistence time after we calculate them. We get the last day on which Dileptus was observed with a filter %&gt;% group_by %&gt;% summarise pipeline. We filter to retain only observations of Dileptus being present (i.e. we exclude observations when Dileptus had zero count/density per ml). Then we group the data by prey richness, prey composition, and replicate (prey richness is redundant but we want to keep it to work with later). Then we use summarise to get the maximum value of the day variable in the filtered data. Translated into R this looks like: temp_persistence_time &lt;- dd %&gt;% filter(species == &quot;Dileptus&quot;, dens_per_ml != 0) %&gt;% group_by(prey_richness, prey_composition, replicate) %&gt;% summarise(last_day_observed = max(day)) Note that the created tibble has only 29 observations, whereas there were 35 experimental communities. This difference occurs because Dileptus was never observed in six of the experimental communities and so these are filtered out of this analysis. We will add them in below as a side effect of another manipulation, so don’t need to take care of this further here. Next we need to recognise that the last day on which Dileptus was observed might have been the last day observed because it was after that observed to be extinct, or that it was never sampled again (e.g. if the last day observed was day 20). If we stop an experiment before we observe the event being watched for (e.g. before we observe extinction) then we say that the observation is censored. We really should include this information in the persistence time dataset. To do so we need to get and add the day of last sample of Dileptus. We do this with the same pipeline as we used to get the last day observed, except we don’t exclude the observations when Dileptus was sampled and found to have zero abundance: pred_last_day &lt;- dd %&gt;% filter(species==&quot;Dileptus&quot;) %&gt;% group_by(prey_richness, prey_composition, replicate) %&gt;% summarise(last_sample=max(day)) The created tibble has the expected number of observations: 35. We then join the two created tibbles and create a new variable that contains TRUE if the observation of persistence time was censored (indicated if the persistence time is the same as the last day sampled) or FALSE if a sample was taken after the observed persistence time (i.e. the observation is not censored). pred_persistence_time &lt;- full_join(temp_persistence_time, pred_last_day) %&gt;% mutate(censored=ifelse(last_day_observed==last_sample, T, F)) ## Joining, by = c(&quot;prey_richness&quot;, &quot;prey_composition&quot;, &quot;replicate&quot;) Because we used full_join we have 35 observations in the resulting tibble, with six NA values of persistence time (and also therefore censored) corresponding to the six communities that are missing from the persistence_time tibble because Dileptus was never observed in those communities. Censored observations in time to event data Often we do not have the exact time at which the event of interest occurred. In this experiment we sampled only one every two days. If we observed some individuals on day 14, for example, and then none on or after day 16, we know that extinction occurred somewhere in the time interval between day 14 and day 16. Thus we have what is called “interval censored” time to event data. That is, unless extinction was not observed by the last sample, in which case the data are right censored, and we can only say that extinction (since it is at some point inevitable) will happen sometime after the day of the last sample. Censoring of time to event data is very common and is formally accounted for in statistical analyses of time to event type data. It certainly complicates and adds potential for misinterpreting visualisation of the data, so we must then at least differentiate data points by the type of censoring they have. 9.8.8.4 Put the all together Let’s put all three response variables into the same tibble, since it will make some of the subsequent things easier and more efficient. We want them all in the same column. “But wait”, you say! If all three response variables are in the same column/variable, how will we know which is which. Easy—we make another variable that tells us the response variable in each row. The new tibble will have 35 * 3 = 105 rows. There are lots of ways to do this. The approach we show is to merge/join the three tibbles containing each of the response variables (pred_max_dens, pred_CV, and pred_persistence_time) which creates a wide-formatted arrangement of the data (a different variable for each of the response variables). And then we’ll transform it into tidy (long) format by gather the information from each of the three separate response variables into one variable. The first step is to merge all three tibbles: spread_rr &lt;- pred_max_dens %&gt;% full_join(pred_CV) %&gt;% full_join(pred_persistence_time) ## Joining, by = c(&quot;prey_richness&quot;, &quot;prey_composition&quot;, &quot;replicate&quot;, &quot;all_zero&quot;) ## Joining, by = c(&quot;prey_richness&quot;, &quot;prey_composition&quot;, &quot;replicate&quot;) We get told both joins are being done by prey_richness, prey_composition, and replicate and also all_zero for the first of the two joins. Lovely—thanks very much. (The join is done by these because R looks for variables shared by the two tibbles being joined, and by default joins by these.) Next step is to gather the three response variables into one variable: rr &lt;- spread_rr %&gt;% gather(key = &quot;Response_type&quot;, value = Value, max_dens, CV, last_day_observed) We tell gather that we’d like the values in the variables max_dens, CV, and last_day_observed gathered together an put into one variable called Values and that we’d like the key variable, i.e. the one that says which response variable each observation is about, to be named Response_type. If how gather works is unclear then please wait until Case Study 3, where the explanation goes into more depth, including a figure showing tidy/long data and the corresponding untidy/wide data (Figure 8.1). Excellent. We now have a tibble rr with 105 observations (as expected), a variable named Response_type with entries max_dens, CV, and last_day_observed, and the values of each of these in the Value variable. We have the other variables all_zero, last_sample, and censored also (which is just fine). 9.9 Shapes Let’s get the mean, standard deviation, and number of observations of each of the response variables for each prey composition. You have seen how to do this before. Take a look back through the book/your notes/your brain to remind yourself. Yes… it’s a pretty straightforward group_by %&gt;% summarise pipeline: summry_rr &lt;- rr %&gt;% group_by(prey_richness, prey_composition, Response_type) %&gt;% summarise(mean = mean(Value, na.rm = TRUE), sd = sd(Value, na.rm = TRUE), n = sum(!is.na(Value))) The resulting tibble summry_rr has 21 observations (7 prey compositions by 3 response variables) and six variables, three of which are the calculated mean, standard deviation, and number of non-NA values. We counted the number of non-NA values by asking which of the entries in Value were not NA using !is.na, which gives a series of TRUE and FALSE values. Then we use sum to count the number of TRUEs. Take a look at the resulting tibble (View(summry_rr)). Can you see any patterns? Do you get clear insights? Probably not. The lesson here is tables are quite difficult to interpret. We need some visualisations of relationships between the response variables differ and the treatments. Before we do this, let’s have a look at the distributions of the response variables. Try to think about how you would produce graphs of the frequency distributions of each of the response variables. Here is how we did it (producing Figure 9.2): ggplot(rr, aes(x = Value)) + geom_histogram(bins = 5) + facet_wrap(~ Response_type, scales = &quot;free&quot;) ## Warning: Removed 12 rows containing non-finite values ## (stat_bin). FIGURE 9.2: Histograms of the three response variables. First note that we are told that 12 non-finite values have been removed and therefore are not in the visualisation. These are the CV and last_day_observed for the six communities were no predators were ever observed. What do you think about the shapes of these distributions? Maximum density looks quite skewed, with lots of small values and few large. This might be expected for an abundance type variable, since growth is a multiplicative process. We would expect a more symmetric distribution of logged abundance (though see Figure 9.3). ## Warning: Removed 6 rows containing non-finite values ## (stat_bin). FIGURE 9.3: Histogram of log10 maximum abundance. We thought that log transformation would make the distribution more symmetric, but it has not… it just made it asymmetric in the opposite direction! There are two reasons why we need to be cautious, however, about interpreting much about these distributions. First, they each contain data from seven different treatments (prey_composition)—only five of the values in each distribution might be expected to come from the same population. In effect, we might be looking at seven distributions superimposed on top of each other. Second, sure, we could plot a separate distribution for each of the prey compositions, but we would only have five values per distribution, and that is not enough to say much about their shapes. I.e. we could not say with any confidence if they are symmetric of not. All is not lost, however, as you will see in the next section in which we look at relationships. 9.10 Relationships Recall the question we’re interested in. Do predators have more stable populations when they have more prey to feed on. We expected this to be so if maximum predator population was greater, if predator population variability was lower, and if predator population persistence was longer when there were more prey available. For each of these we must look at the relationship between the response variable and prey richness (the explanatory variable). We can also look at prey composition as an explanatory variable, to see if there is much difference between effects of prey communities with same number of prey species, but different compositions of prey species. 9.10.1 Maximum predator density Recall that we have one tibble rr with all three response variables. Clearly then, if we want to plot data about only maximum prey density we will need to filter the data according to Response_type == &quot;max_dens. We then do a pretty straightforward ggplot with prey_richness mapped onto the x-axis, the Value of maximum density mapped onto the y-axis, and then a geom_jitter with jitter only along the x-axis (width). Here’s the code, and the result is in Figure 9.4: FIGURE 9.4: A not so useful graph due to the y-axis label being totally uninformative. Value of what? There is a big problem with this. Our figure does not tell us what is on the y-axis (“Value” is not particularly informative!) We could fix this by changing the y-axis like this (no figure is presented for this code): rr %&gt;% filter(Response_type == &quot;max_dens&quot;) %&gt;% ggplot(aes(x = prey_richness, y = Value, col = prey_composition)) + geom_jitter(width = 0.1, height = 0) + ylab(&quot;max_dens&quot;) This is a bit dangerous, in fact, because we have to make sure we have max_dens written in two places. If we accidentally to write max_dens in the filter and CV in the ylab we will get no warning, no error, and have no idea we did anything wrong. We should spot the error if we carefully compare the graphs among the three different response variables, as there should be some inconsistencies (e.g. exactly the same data plotted in two, or two with different data but the same ylab). Let’s do the graph so we making this error is impossible. First we define an object (we name it rv_oi which is an abbreviation of “response variable of interest”) and assign to it the name of the response variable we want to graph (max_dens in this case): rv_oi &lt;- &quot;max_dens&quot; Then we use the same ggplot code as before, but with rv_oi in place of &quot;max_dens&quot; (the resulting graph is in Figure 9.5): FIGURE 9.5: A reasonably nice graph of maximum predator density in a community against the number of prey available to the predator. Super. We have a safe approach and a useful graph. Do you think there is strong evidence of higher maximum predator abundance at higher prey richness? Neither do we. Strike one. Plot the data points Note that we are plotting the data points, and not bars with error bars, or even box-and-whisker plots. There are few enough data points in this study that we experience no problems when we plot the data itself, rather than some summary of the data (e.g. the mean plus and minus the standard deviation). As a rule, always plot the data. If we feel that we can’t so easily see the differences among prey compositions within the prey richness levels, we can make Figure 9.6, and flip the x and y-axis since the prey composition names then fit better: FIGURE 9.6: This time maximum predator density plotted against prey composition, with prey composition on the y-axis as an easy method for having the tick-labels (prey composition) not overlap. Some things are a bit clearer. 1) The predator seems to like the prey Colpidium when alone more than either of the other two when alone. 2) Adding Paramecium into a mix with Colpidium gets rid of the beneficial nature of Colpidium (i.e. these two act non-additively). 3) There is huge variation in predator abundance when feeding on a mixture of Colpdium and Collodictyon. Overall, there are strong effects of prey composition, and they sometimes involve non-additive effects, but little evidence of increases in predator abundance with increases in prey richness. Let’s move on to the next response variable. 9.10.2 Predator population variability (CV) Making the graphs for CV is now a doddle. We just set rv_oi = &quot;CV and then run exactly the same code as before, resulting in Figure 9.7: ## Warning: Removed 6 rows containing missing values ## (geom_point). FIGURE 9.7: A quite informative graph of predator population variability (measured as the coefficient of variation–CV) in a community against the number of prey available to the predator. And Figure 9.8: ## Warning: Removed 6 rows containing missing values ## (geom_point). FIGURE 9.8: Predator population variability (CV) for each of the prey compositions. It would be nice to know from which jar the very low value for one of the Collodictyon replicate comes. We show how to do that next. What do you think? Would you be confident stating that there was a negative relationship here, such that increases in prey richness cause decreases in predator population variability? Put another way, how much would you bet that in reality there is an effect? One problem here is that we have rather few data points, and quite a bit of variability even within prey compositions. Indeed, the amount of variability in the CV of the replicates of the Collodictyon prey composition is greater than all of the other data! In large part this is due to one very low CV Collodictyon replicate. Looking back at Figure 9.1, can you guess which of the Collodictyon replicates resulted in this very low CV. It is replicate 5, the one with only two samples. But this raises a couple of important points: How could be label data points in Figure 9.8 and facets in Figure 9.1 with the jar identifier, so we can directly see the corresponding data? What if anything should we do about data points that seem rather extreme? Let’s deal with number 1 first. We can put on the jar number as a labels on the facets of 9.1 and beside the data points in Figure 9.8. Here’s the code for putting the jar numbers onto the facets. First we get a tibble with the jar number for each prey_composition and replicate, by selecting only those three columns and getting unique rows: jar_text &lt;- dd %&gt;% select(prey_composition, replicate, jar) %&gt;% unique() The resulting tibble has 35 rows, one for each jar (microcosm). Then we use the same code as before but with an extra geom_text in which we give the data to use jar_text, tell it the x and y positions for the label, and then give the aesthetic mappings label = jar (i.e. make the label aesthetic correspond to jar) and the aesthetic mapping col = NULL (so that the previously defined col = species mapping is not used). Here’s the code, and the resulting graph is in Figure 9.9: dd %&gt;% ggplot(aes(x = day, y = log10(dens_per_ml), col = species)) + geom_point() + geom_line() + facet_grid(prey_composition ~ replicate) + geom_text(data = jar_text, x = 18, y = 3.5, aes(label = jar, col = NULL)) FIGURE 9.9: Jar numbers added to the plot of population dynamics observed during the experiment. Next we add points to the graph of the CV (Figure 9.8). First we need to remake the tibble containing the CVs, this time keeping the jar variable by adding it as a (albeit redundant) variable in the group_by: pred_CV &lt;- dd %&gt;% filter(species == &quot;Dileptus&quot;) %&gt;% group_by(jar, prey_richness, prey_composition, replicate) %&gt;% summarise(CV = sd(dens_per_ml) / mean(dens_per_ml), all_zero = sum(dens_per_ml &gt; 0) == 0) Install the ggrepel add-on package. It moves labels on graphs so they don’t lie on top of each other, i.e. they repel each other. Now we remake the CV figure with the jar numbers labeling the data points. We simply add a geom_text_repel with the jar numbers mapped onto the label aesthetic. Here’s the code, and the resulting graph is in Figure 9.10. library(ggrepel) ggplot(pred_CV, aes(x = prey_composition, y = CV)) + geom_jitter(width = 0.1, height = 0) + coord_flip() + geom_text_repel(aes(label = jar)) ## Warning: Removed 6 rows containing missing values ## (geom_point). ## Warning: Removed 6 rows containing missing values ## (geom_text_repel). FIGURE 9.10: Again the predator population variability data, but this time with jar numbers added as label by the data points. Super. It’s extremely useful to be able to add labels to data point in graphs, so we can see which replicate, individual, site, etc., the data point corresponds to. This is especially useful when we see what appear to be rather extreme values, which bring us to the next general point—what can and should we do when we see what might be extreme values? Here is a checklist: Use your best judgment about if a value seems extreme. If you’re in doubt, consider it extreme. Nothing we subsequently do will with these apparently extreme values will cause problems if we include some values as being extreme that other people might not. Check that each extreme value is not the result of an error. E.g. in data entry, or subsequent assumptions in calculations. If you ever meet us in person, ask us to tell you the badger testicle size story. It involves using -9999 as the missing value indicator, calculation of testicle volume that involved squaring the measured testicle width, and some apparently very well endowed badgers. Plot your graphs with and without the extreme values and see if this leads to you changing your opinion about the presence, absence, or nature of any patterns. If it seems that including or excluding them is important, well, that’s your answer. Your conclusions are not so robust. It’s beyond the scope of this book, but still worth mentioning that there are quantitative ways to assess if data points are extreme (also known as outliers) and if they affect quantitative conclusions (i.e. result of statistical analyses), but ultimately all include some element of subjectivity in their use and interpretation. While we’re on the subject of subjectivity and perception, we should think about whether flipping the axis does more than just make room for the prey composition labels. Does having the graph flipped change our perception of pattern (or lack thereof) in the data? Figure 9.11A and B. We (personally) tend to see more evidence of a negative relationship in panel B (with prey richness on the x-axis) but you might be different. We need to be careful to not exploit, or fall prey to, any such effects in the presentation of data. The data should, as far as possible, do all the talking. ## Warning: Removed 6 rows containing missing values ## (geom_point). ## Warning: Removed 6 rows containing missing values ## (geom_point). FIGURE 9.11: The same graph twice, but with the axis flipped between them. Do you think pattern is more apparent in one versus the other? 9.10.3 Predator persistence time Visualising predator persistence time (the last day on which a predator was observed) uses the same code as the previous two response variables, but with one tweek. We should differentiate in the visualisation data points that are and are not censored. One method is to make their data points have different shapes. That is, we map the shape aesthetic to the censored variable (the resulting graph is in Figure 9.12): ## Warning: Removed 6 rows containing missing values ## (geom_point). FIGURE 9.12: A reasonably nice graph of predator population persistence time against the number of prey available to the predator. There is pretty strong evidence that more prey species available to a predator increases the time for which the predator population persists. With three prey species available, three of the persistence times were censored, and two of these were censored after 20 days—the longest of any population observed. There isn’t such a clear difference between persistence times between one and two prey communities. We also show, as before, the same data for each prey composition, again showing which observations of persistence time are censored (the resulting graph is in Figure 9.13): FIGURE 9.13: Predator population persistence time for each of the prey compositions. Here we can see that one of the two prey species compositions (Collodictyon and Paramecium) results in predator persistence times as long as with three prey species. And that one of the one prey species composition (Colpidium) results in persistence times as long as some of the two prey species compositions. So there are quite strong compositional effects as well as the richness effect mentioned above. Look at Figure (???)(fig:microbe6-3) showing what happens if prey_composition is just a character variable and not an ordered factor. The ordering of the prey compositions is not quite as desirable. FIGURE 9.14: Notice how the prey compositions are ordered when we let R choose the order. This happens when we fail to specify ourselves what the order should be, by making the prey composition variable an ordered factor type variable. 9.10.4 All three at once You might be wondering why we went to the lengths of putting all three response variables into one tibble and the having to filter in order to plot each of the three graphs. This was a bit of a faff. We could have just continued using the three separate tibbles we made. Here comes the answer, or at least here comes one answer. If we put all three response variables into the same tibble the we can plot all three graphs at the same time, in one ggplot with three facets (Figure 9.15): rr %&gt;% ggplot(aes(x = prey_richness, y = Value, col = prey_composition)) + geom_jitter(width = 0.1, height = 0) + facet_wrap(~ Response_type, scales = &quot;free_y&quot;) + theme(legend.position = &quot;top&quot;) + guides(colour = guide_legend(title.position = &quot;top&quot;, nrow = 3, position = &quot;top&quot;)) ## Warning: Removed 12 rows containing missing values ## (geom_point). FIGURE 9.15: All three reponse variables efficiently made in one call to ggplot with a facet for each variable, and some fiddling with the legend to get it at the top and not too wide. How useful is it to be able to plot all response variables in one go like this? We’re not too sure. We now have the problem of how to show the censored data points in the last_day_observed data. We also see that the order of the facets is different from the order of the response variables presented in the text above. This would need changing for consistency (you can probably guess how we would do this… the same thing we did with the prey_composition variable). We’ll leave this for you to do. And also to make the version of this graph with prey_composition as the explanatory variable. 9.11 Wrapping up The published paper on this dataset had a few other analyses, but not too many. So what you learned above is very much a replica of a real and quite complete representation of the results and insights in the that study. Yes, we didn’t do the statistics, but our conclusions are pretty much the same (though this could easily be in part influenced by Owen knowing in the conclusions before he wrote this chapter). One important thing. It would be very very wrong for you to get the impression that one can think through all the likely issues with the data and in a lovely linear process work from the data to the Insights. Probably this impression comes from this chapter and those of the first case study. For example, we do things early on in the data manipulation in order to make things easier later on. It looks like we anticipate a problem that will arise and prevent it ever occurring. The truth is, however, that we often found problems once we had got quite far into the data processing, and then realised we should go back and fix their cause. E.g. we found a problem while plotting the data, realised this was caused by an issue that could be sorted out much earlier on, and therefore have positive effects on all subsequent analyses. We did not just do a quick fix on the problematic graph… we fixed the source of the problem. This is a very very good habit to get into. Fix the cause, don’t just treat the symptom. Fixing the cause will increase efficiency, reliability, and all round happiness. 9.12 Some questions Go to the Insights companion website http://insightsfromdata.io and have a go at the questions and exercises for this chapter. "],
["WFD-4.html", "Chapter 10 Effects of dietary restriction 10.1 Before working in R 10.2 After importing the data into R 10.3 Independence 10.4 Balance in experimental design 10.5 Calculate response variable(s) (if required) 10.6 Merge all datasets together and check for correct number of rows 10.7 Super sleuth questions 10.8 Inspect shapes (distributions) 10.9 Inspect relationships 10.10 Moatt et al Data S1 – Mortality Data 10.11 Moatt et al Data S5 – Courtship Data 10.12 Moatt et al Data S6 – Eggs Data 10.13 Moatt et al Data S15 – Length, Weight and Condition Index Data", " Chapter 10 Effects of dietary restriction ## Load the libraries we use library(dplyr) library(ggplot2) library(readr) library(stringr) library(lubridate) library(skimr) library(tidyr) library(ggbeeswarm) library(taxize) library(broom) library(forcats) A general article about dietary restriction (DR): https://www.nia.nih.gov/health/calorie-restriction-and-fasting-diets-what-do-we-know The case study article: Reconciling nutritional geometry with classical dietary restriction: effects of nutrient intake, not calories, on survival and reproduction. Moatt JP, Fyfe MA, Heap E, Mitchell LJM, Moon F, Walling CA (2018) Aging Cell, Volume 18, e12868. Article: https://doi.org/10.1111/acel.12868 Data: https://doi.org/10.5061/dryad.g12p0j2 Abstract: “Here, using a novel nonmodel vertebrate system (the stickleback fish, Gasterosteus aculeatus), we test the effect of macronutrient versus calorie intake on key fitness‐related traits, both using the GF and avoiding dietary dilution. We find that the intake of macronutrients rather than calories determines both mortality risk and reproduction. Male mortality risk was lowest on intermediate lipid intakes, and female risk was generally reduced by low protein intakes. The effect of macronutrient intake on reproduction was similar between the sexes, with high protein intakes maximizing reproduction.” 10.1 Before working in R Question: How does diet composition and amount of food individually and in combination affect individual characteristics related to health and fitness? Hypotheses/predictions: Fitness: “mortality” Fitness: “reproductive behaviour (time spent courting)” Fitness: “Female reproduction (total egg production)” Health: “We use change in fish length as our measure of growth.” Health: “As a proxy for overall health, we use body condition index, which is a measure of the weight of an individual relative to its length” Study methods and design (numbers of “things”) “We fed 300 male and 300 female individually housed three‐spine sticklebacks one of five diets varying in protein and lipid content (Table 2) at one of three provisioning levels (100%, 75% or 50% of ad lib), therefore using a restriction of food availability rather than a dilution of the diets to achieve calorie restriction. This gave a total of 15 dietary treatments (see methods and supplementary materials for full details). Fish were maintained on diets for life and measured for numerous traits including survival, reproductive investment, growth and body condition. Given the broad range of traits examined, we present data for each trait separately, with an accompanying short interpretation section.” “Mortality was checked twice daily and date of death was recorded. We quantified male lifetime reproductive investment as the total time spent courting (in seconds) across all courtship attempts. Males were also assayed for other common reproductive behaviours (e.g., territory defence, nesting and nuptial coloration—see supplementary methods and analysis). Female lifetime reproductive investment was taken as the total number of eggs produced). Fish were monitored for growth (length (mm) and weight (g)) approximately every 1–2 months (Supporting Information Table S26). From these measures, body condition (overall health) was also quantified (Moatt et al., 2017 and supplementary methods).” Q: How many fish per treatment combination? A. 20 Type of response variable: Mortality—binary, dead or alive. Time spent courting—cannot be negative, will likely be numeric, may be distrete (e.g. 10 mins or 20 minutes) or continuous, ratio type. Female reproduction egg production—count type data, not negative, discrete (integers), ratio type. Change in fish length—could be negative or positive, ratio type. Body condition index (a measure of the weight of an individual relative to its length)-only positive, likely continuous, ratio type. Explanatory variables: A variable about the diet composition treatment. A variable about the provisioning level treatment. Perhaps some others. Predictions: What were the predictions? Data birth: Number of variables: not too many as a designed experiment with clear question. Number of observations: number of fish (they were “individually housed”, and assigned treatment on an individual level). Variables describing manipulations: yes, two. Correlation among variables: low (factorial experiment, though some imbalance likely) Independence of observations: there may be multiple observations per fish (repeated measures). Fish may share mothers, fathers, and other pre-experiment conditions. Secure resources and perform study Which datafiles: Have a look at the data files on the dryad repository. Which data files are required for which response variable? mortality &lt;- read_csv(&quot;data/Moatt_et_al_Data_S1.csv&quot;) ## Parsed with column specification: ## cols( ## .default = col_double(), ## FID = col_character(), ## Sex = col_character(), ## Size = col_character() ## ) ## See spec(...) for full column specifications. courtship &lt;- read_csv(&quot;data/Moatt_et_al_Data_S5.csv&quot;) ## Parsed with column specification: ## cols( ## FID = col_character(), ## Family = col_character(), ## Shelf_stack = col_character(), ## Diet = col_double(), ## Level = col_double(), ## Size = col_character(), ## Trial = col_double(), ## Days_breeding = col_double(), ## P_day = col_double(), ## P2_day = col_double(), ## L_day = col_double(), ## L2_day = col_double(), ## Mean_react = col_double(), ## Total_ZZ = col_double(), ## Total_lead = col_double(), ## Total_court = col_double() ## ) eggs &lt;- read_csv(&quot;data/Moatt_et_al_Data_S6.csv&quot;) ## Parsed with column specification: ## cols( ## FID = col_character(), ## Family = col_character(), ## Stack_shelf = col_character(), ## Diet = col_double(), ## Level = col_double(), ## Size = col_character(), ## P_day = col_double(), ## P2_day = col_double(), ## L_day = col_double(), ## L2_day = col_double(), ## Days_breeding = col_double(), ## Number_clutches = col_double(), ## mean_number = col_double(), ## Total_egg = col_double() ## ) length_weight_condition &lt;- read_csv(&quot;data/Moatt_et_al_Data_S15.csv&quot;) ## Parsed with column specification: ## cols( ## FID = col_character(), ## Shelf_stack = col_character(), ## Sex = col_character(), ## Diet = col_double(), ## Level = col_double(), ## Size = col_character(), ## Batch = col_double(), ## P_day = col_double(), ## P2_day = col_double(), ## L_day = col_double(), ## L2_day = col_double(), ## ZP = col_double(), ## ZP2 = col_double(), ## ZL = col_double(), ## ZL2 = col_double(), ## Ln = col_double(), ## Wt = col_double(), ## CI = col_double() ## ) Variables in the datafiles: Look at the data file key word document in the dryad repository. Which variables tell us about the experimental design (including the explantory variables) and when observations were made? FID – Unique ID for each individual. Diet – Diet Treatment (Diet P:L: 1 = 10.2:1, 2 = 4.6:1, 3 = 2.5:1, 4 = 8.5:1, 5 = 1.6:1). Sex – Sex of individual (M = male, F = female). Size – Size classification of individual (L = large, S = Small). Level – Provisioning level, values represent percentages of monthly ad libitum monitoring. Week_F – Experimental week. Batch – Weighing batch. There are numerous other variables in the datasets. We will look at them if and when we need to. Which variables in which dataset can be used to calculate each of the five response variables? Mortality: status, 0 = alive, 1 = Dead, in Moatt_et_al_Data_S1.csv Time spent courting: Total_court – Total time courting across all trials, in Moatt_et_al_Data_S5.csv. Female reproduction egg production: Total_egg – Total number of eggs produced, in Moatt_et_al_Data_S6.csv. Change in fish length: Ln – Length of individual in mm, in Moatt_et_al_Data_S15.csv. Body condition index: CI – Condition Index for each individual, Moatt_et_al_Data_S15.csv. Number of rows and columns in the dataset: (By looking at the datasets in a spreadsheet programme) Moatt_et_al_Data_S1.csv: 33’049 rows, 24 variables Moatt_et_al_Data_S5.csv: 228, 16 Moatt_et_al_Data_S6.csv: 269, 14 Moatt_et_al_Data_S15.csv:6000, 18 10.2 After importing the data into R number of rows and columns: as expected tidy: all four datasets appear tidy, at the moment. variable types: all as expected fix dates: none present Make more informative variable names (and discard variables not obviously of use): courtship &lt;- courtship %&gt;% select(Fish_ID=FID, Family, Shelf_stack, Diet_comp=Diet, Prov_level=Level, Fish_size=Size, Trial, Total_court) eggs &lt;- eggs %&gt;% select(Fish_ID=FID, Family, Shelf_stack=Stack_shelf, Diet_comp=Diet, Prov_level=Level, Fish_size=Size, Total_egg) length_weight_condition &lt;- length_weight_condition %&gt;% select(Fish_ID=FID, Shelf_stack, Diet_comp=Diet, Sex=Sex, Batch, Prov_level=Level, Fish_size=Size, Length=Ln, Weigth=Wt, Cond_index=CI) mortality &lt;- mortality %&gt;% select(Fish_ID=FID, Diet_comp=Diet, Sex, Prov_level=Level, Fish_size=Size, Week=Week_F, Status) Replace codes with informative words: courtship &lt;- courtship %&gt;% mutate(Diet_comp = case_when(Diet_comp == 1 ~ &quot;10.2:1&quot;, Diet_comp == 2 ~ &quot;4.6:1&quot;, Diet_comp == 3 ~ &quot;2.5:1&quot;, Diet_comp == 4 ~ &quot;8.5:1&quot;, Diet_comp == 5 ~ &quot;1.6:1&quot;), Fish_size = case_when(Fish_size == &quot;S&quot; ~ &quot;Small&quot;, Fish_size == &quot;L&quot; ~ &quot;Large&quot;)) eggs &lt;- eggs %&gt;% mutate(Diet_comp = case_when(Diet_comp == 1 ~ &quot;10.2:1&quot;, Diet_comp == 2 ~ &quot;4.6:1&quot;, Diet_comp == 3 ~ &quot;2.5:1&quot;, Diet_comp == 4 ~ &quot;8.5:1&quot;, Diet_comp == 5 ~ &quot;1.6:1&quot;), Fish_size = case_when(Fish_size == &quot;S&quot; ~ &quot;Small&quot;, Fish_size == &quot;L&quot; ~ &quot;Large&quot;)) length_weight_condition &lt;- length_weight_condition %&gt;% mutate(Diet_comp = case_when(Diet_comp == 1 ~ &quot;10.2:1&quot;, Diet_comp == 2 ~ &quot;4.6:1&quot;, Diet_comp == 3 ~ &quot;2.5:1&quot;, Diet_comp == 4 ~ &quot;8.5:1&quot;, Diet_comp == 5 ~ &quot;1.6:1&quot;), Fish_size = case_when(Fish_size == &quot;S&quot; ~ &quot;Small&quot;, Fish_size == &quot;L&quot; ~ &quot;Large&quot;), Sex = case_when(Sex == &quot;M&quot; ~ &quot;Male&quot;, Sex == &quot;F&quot; ~ &quot;Female&quot;)) mortality &lt;- mortality %&gt;% mutate(Diet_comp = case_when(Diet_comp == 1 ~ &quot;10.2:1&quot;, Diet_comp == 2 ~ &quot;4.6:1&quot;, Diet_comp == 3 ~ &quot;2.5:1&quot;, Diet_comp == 4 ~ &quot;8.5:1&quot;, Diet_comp == 5 ~ &quot;1.6:1&quot;), Fish_size = case_when(Fish_size == &quot;S&quot; ~ &quot;Small&quot;, Fish_size == &quot;L&quot; ~ &quot;Large&quot;), Sex = case_when(Sex == &quot;M&quot; ~ &quot;Male&quot;, Sex == &quot;F&quot; ~ &quot;Female&quot;), Status = case_when(Status == 0 ~ &quot;alive&quot;, Status == 1 ~ &quot;dead&quot;)) 10.2.1 Checking for duplicates Question: which of the four datasets contains an odd duplicate entry? And which fish is involved? What should we do next? sum(duplicated(select(courtship, Fish_ID))) ## [1] 0 sum(duplicated(select(eggs, Fish_ID))) ## [1] 0 sum(duplicated(select(length_weight_condition, Fish_ID, Batch))) ## [1] 0 sum(duplicated(select(mortality, Fish_ID, Week))) ## [1] 1 dupl &lt;- duplicated(select(mortality, Fish_ID, Week)) filter(mortality, dupl) ## # A tibble: 1 x 7 ## Fish_ID Diet_comp Sex Prov_level Fish_size Week ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 LR504 1.6:1 Male 100 Small 2 ## # … with 1 more variable: Status &lt;chr&gt; filter(mortality, Fish_ID==&quot;LR504&quot;, Week==2) ## # A tibble: 2 x 7 ## Fish_ID Diet_comp Sex Prov_level Fish_size Week ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 LR504 1.6:1 Male 100 Small 2 ## 2 LR504 1.6:1 Male 100 Small 2 ## # … with 1 more variable: Status &lt;chr&gt; filter(mortality, Fish_ID==&quot;LR504&quot;) ## # A tibble: 4 x 7 ## Fish_ID Diet_comp Sex Prov_level Fish_size Week ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 LR504 1.6:1 Male 100 Small 1 ## 2 LR504 1.6:1 Male 100 Small 2 ## 3 LR504 1.6:1 Male 100 Small 2 ## 4 LR504 1.6:1 Male 100 Small 4 ## # … with 1 more variable: Status &lt;chr&gt; 10.2.2 NAs, variable entries, e.g. levels of characters, ranges of numerics, numbers of “things”* How many missing values in the courtship dataset (remember to reduce the variables to those mentioned above)? Which variable(s) contain missing values? Which fish have missing values? How many different entries are there in the Shelf_stack variable? What are the mean and median of the Total_court variable? What are the units of the Total_court variable? (From paper only, seconds) skim(courtship) ## # A tibble: 68 x 6 ## variable type stat level value formatted ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Fish_ID character missing .all 0 0 ## 2 Fish_ID character complete .all 228 228 ## 3 Fish_ID character n .all 228 228 ## 4 Fish_ID character min .all 5 5 ## 5 Fish_ID character max .all 5 5 ## # … with 63 more rows filter(courtship, is.na(Total_court)) ## # A tibble: 1 x 8 ## Fish_ID Family Shelf_stack Diet_comp Prov_level ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 LR021 F117 A3 8.5:1 50 ## # … with 3 more variables: Fish_size &lt;chr&gt;, ## # Trial &lt;dbl&gt;, Total_court &lt;dbl&gt; 228 fish IDs skim(eggs) ## # A tibble: 57 x 6 ## variable type stat level value formatted ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Fish_ID character missing .all 0 0 ## 2 Fish_ID character complete .all 269 269 ## 3 Fish_ID character n .all 269 269 ## 4 Fish_ID character min .all 5 5 ## 5 Fish_ID character max .all 5 5 ## # … with 52 more rows filter(eggs, is.na(Total_egg)) ## # A tibble: 1 x 7 ## Fish_ID Family Shelf_stack Diet_comp Prov_level ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 LR212 F121 D3 2.5:1 75 ## # … with 2 more variables: Fish_size &lt;chr&gt;, ## # Total_egg &lt;dbl&gt; 269 fish IDs skim(length_weight_condition) ## # A tibble: 90 x 6 ## variable type stat level value formatted ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Fish_ID character missing .all 0 0 ## 2 Fish_ID character complete .all 6000 6000 ## 3 Fish_ID character n .all 6000 6000 ## 4 Fish_ID character min .all 5 5 ## 5 Fish_ID character max .all 5 5 ## # … with 85 more rows 600 fish IDs skim(mortality) ## # A tibble: 57 x 6 ## variable type stat level value formatted ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Fish_ID character missing .all 0 0 ## 2 Fish_ID character complete .all 33049 33049 ## 3 Fish_ID character n .all 33049 33049 ## 4 Fish_ID character min .all 5 5 ## 5 Fish_ID character max .all 5 5 ## # … with 52 more rows 594 fish IDs 10.3 Independence table(pull(courtship, Fish_ID)) ## ## LR001 LR004 LR005 LR010 LR019 LR021 LR022 LR023 LR024 ## 1 1 1 1 1 1 1 1 1 ## LR033 LR034 LR042 LR046 LR048 LR049 LR052 LR056 LR057 ## 1 1 1 1 1 1 1 1 1 ## LR060 LR062 LR064 LR069 LR070 LR071 LR072 LR077 LR087 ## 1 1 1 1 1 1 1 1 1 ## LR093 LR095 LR099 LR102 LR106 LR109 LR111 LR113 LR117 ## 1 1 1 1 1 1 1 1 1 ## LR118 LR124 LR126 LR129 LR130 LR132 LR136 LR137 LR139 ## 1 1 1 1 1 1 1 1 1 ## LR140 LR141 LR143 LR148 LR150 LR154 LR157 LR158 LR161 ## 1 1 1 1 1 1 1 1 1 ## LR165 LR167 LR174 LR175 LR176 LR178 LR182 LR184 LR185 ## 1 1 1 1 1 1 1 1 1 ## LR186 LR187 LR189 LR190 LR192 LR200 LR201 LR205 LR206 ## 1 1 1 1 1 1 1 1 1 ## LR208 LR209 LR210 LR211 LR214 LR218 LR221 LR224 LR226 ## 1 1 1 1 1 1 1 1 1 ## LR227 LR230 LR235 LR238 LR244 LR246 LR247 LR248 LR249 ## 1 1 1 1 1 1 1 1 1 ## LR257 LR258 LR259 LR264 LR265 LR268 LR269 LR273 LR276 ## 1 1 1 1 1 1 1 1 1 ## LR277 LR279 LR283 LR284 LR285 LR294 LR299 LR300 LR302 ## 1 1 1 1 1 1 1 1 1 ## LR303 LR304 LR305 LR311 LR312 LR314 LR315 LR322 LR327 ## 1 1 1 1 1 1 1 1 1 ## LR328 LR329 LR331 LR332 LR333 LR334 LR340 LR347 LR348 ## 1 1 1 1 1 1 1 1 1 ## LR352 LR353 LR358 LR360 LR361 LR363 LR364 LR366 LR367 ## 1 1 1 1 1 1 1 1 1 ## LR368 LR372 LR373 LR374 LR379 LR380 LR381 LR383 LR384 ## 1 1 1 1 1 1 1 1 1 ## LR385 LR386 LR390 LR391 LR392 LR394 LR395 LR402 LR404 ## 1 1 1 1 1 1 1 1 1 ## LR405 LR406 LR412 LR413 LR415 LR416 LR420 LR421 LR422 ## 1 1 1 1 1 1 1 1 1 ## LR423 LR427 LR429 LR430 LR438 LR440 LR442 LR445 LR452 ## 1 1 1 1 1 1 1 1 1 ## LR453 LR454 LR456 LR459 LR460 LR462 LR463 LR464 LR465 ## 1 1 1 1 1 1 1 1 1 ## LR471 LR472 LR473 LR475 LR477 LR478 LR480 LR481 LR485 ## 1 1 1 1 1 1 1 1 1 ## LR489 LR493 LR500 LR502 LR503 LR505 LR516 LR518 LR524 ## 1 1 1 1 1 1 1 1 1 ## LR532 LR537 LR539 LR541 LR542 LR544 LR546 LR549 LR551 ## 1 1 1 1 1 1 1 1 1 ## LR552 LR555 LR557 LR558 LR559 LR560 LR570 LR572 LR573 ## 1 1 1 1 1 1 1 1 1 ## LR574 LR577 LR578 LR581 LR584 LR585 LR591 LR594 LR596 ## 1 1 1 1 1 1 1 1 1 ## LR597 LR598 LR600 ## 1 1 1 table(pull(eggs, Fish_ID)) ## ## LR002 LR003 LR006 LR007 LR008 LR009 LR012 LR013 LR014 ## 1 1 1 1 1 1 1 1 1 ## LR016 LR025 LR027 LR029 LR030 LR031 LR032 LR035 LR037 ## 1 1 1 1 1 1 1 1 1 ## LR039 LR042 LR043 LR045 LR053 LR055 LR058 LR059 LR065 ## 1 1 1 1 1 1 1 1 1 ## LR066 LR067 LR075 LR076 LR079 LR080 LR081 LR082 LR083 ## 1 1 1 1 1 1 1 1 1 ## LR084 LR085 LR086 LR088 LR089 LR090 LR091 LR094 LR096 ## 1 1 1 1 1 1 1 1 1 ## LR097 LR100 LR101 LR104 LR105 LR107 LR108 LR110 LR112 ## 1 1 1 1 1 1 1 1 1 ## LR114 LR115 LR116 LR119 LR120 LR121 LR122 LR125 LR127 ## 1 1 1 1 1 1 1 1 1 ## LR128 LR131 LR134 LR138 LR142 LR144 LR145 LR146 LR149 ## 1 1 1 1 1 1 1 1 1 ## LR151 LR152 LR153 LR155 LR159 LR160 LR162 LR163 LR164 ## 1 1 1 1 1 1 1 1 1 ## LR169 LR170 LR172 LR173 LR177 LR181 LR183 LR191 LR193 ## 1 1 1 1 1 1 1 1 1 ## LR194 LR195 LR196 LR197 LR207 LR212 LR213 LR215 LR216 ## 1 1 1 1 1 1 1 1 1 ## LR217 LR219 LR220 LR223 LR225 LR228 LR229 LR231 LR232 ## 1 1 1 1 1 1 1 1 1 ## LR233 LR234 LR236 LR237 LR240 LR241 LR242 LR245 LR250 ## 1 1 1 1 1 1 1 1 1 ## LR252 LR253 LR254 LR256 LR260 LR261 LR262 LR266 LR267 ## 1 1 1 1 1 1 1 1 1 ## LR270 LR271 LR272 LR275 LR278 LR282 LR286 LR288 LR289 ## 1 1 1 1 1 1 1 1 1 ## LR290 LR291 LR292 LR293 LR294 LR295 LR296 LR297 LR298 ## 1 1 1 1 1 1 1 1 1 ## LR306 LR307 LR309 LR313 LR316 LR317 LR320 LR321 LR323 ## 1 1 1 1 1 1 1 1 1 ## LR324 LR325 LR326 LR338 LR342 LR343 LR346 LR349 LR354 ## 1 1 1 1 1 1 1 1 1 ## LR355 LR356 LR357 LR362 LR364 LR365 LR369 LR370 LR371 ## 1 1 1 1 1 1 1 1 1 ## LR382 LR388 LR389 LR393 LR396 LR398 LR400 LR407 LR409 ## 1 1 1 1 1 1 1 1 1 ## LR410 LR411 LR414 LR417 LR418 LR419 LR428 LR431 LR433 ## 1 1 1 1 1 1 1 1 1 ## LR434 LR435 LR436 LR437 LR443 LR444 LR446 LR447 LR448 ## 1 1 1 1 1 1 1 1 1 ## LR449 LR450 LR451 LR457 LR458 LR461 LR466 LR467 LR469 ## 1 1 1 1 1 1 1 1 1 ## LR470 LR474 LR476 LR482 LR484 LR488 LR490 LR491 LR492 ## 1 1 1 1 1 1 1 1 1 ## LR494 LR495 LR497 LR498 LR501 LR506 LR507 LR509 LR510 ## 1 1 1 1 1 1 1 1 1 ## LR512 LR513 LR514 LR517 LR519 LR520 LR522 LR523 LR525 ## 1 1 1 1 1 1 1 1 1 ## LR526 LR527 LR528 LR530 LR531 LR534 LR535 LR536 LR538 ## 1 1 1 1 1 1 1 1 1 ## LR540 LR543 LR545 LR553 LR554 LR556 LR561 LR562 LR563 ## 1 1 1 1 1 1 1 1 1 ## LR565 LR566 LR568 LR569 LR571 LR575 LR576 LR579 LR580 ## 1 1 1 1 1 1 1 1 1 ## LR581 LR582 LR583 LR587 LR588 LR592 LR595 LR599 ## 1 1 1 1 1 1 1 1 table(pull(length_weight_condition, Fish_ID)) ## ## LR001 LR002 LR003 LR004 LR005 LR006 LR007 LR008 LR009 ## 10 10 10 10 10 10 10 10 10 ## LR010 LR011 LR012 LR013 LR014 LR015 LR016 LR017 LR018 ## 10 10 10 10 10 10 10 10 10 ## LR019 LR020 LR021 LR022 LR023 LR024 LR025 LR026 LR027 ## 10 10 10 10 10 10 10 10 10 ## LR028 LR029 LR030 LR031 LR032 LR033 LR034 LR035 LR036 ## 10 10 10 10 10 10 10 10 10 ## LR037 LR038 LR039 LR040 LR041 LR042 LR043 LR044 LR045 ## 10 10 10 10 10 10 10 10 10 ## LR046 LR047 LR048 LR049 LR050 LR051 LR052 LR053 LR054 ## 10 10 10 10 10 10 10 10 10 ## LR055 LR056 LR057 LR058 LR059 LR060 LR061 LR062 LR063 ## 10 10 10 10 10 10 10 10 10 ## LR064 LR065 LR066 LR067 LR068 LR069 LR070 LR071 LR072 ## 10 10 10 10 10 10 10 10 10 ## LR073 LR074 LR075 LR076 LR077 LR078 LR079 LR080 LR081 ## 10 10 10 10 10 10 10 10 10 ## LR082 LR083 LR084 LR085 LR086 LR087 LR088 LR089 LR090 ## 10 10 10 10 10 10 10 10 10 ## LR091 LR092 LR093 LR094 LR095 LR096 LR097 LR098 LR099 ## 10 10 10 10 10 10 10 10 10 ## LR100 LR101 LR102 LR103 LR104 LR105 LR106 LR107 LR108 ## 10 10 10 10 10 10 10 10 10 ## LR109 LR110 LR111 LR112 LR113 LR114 LR115 LR116 LR117 ## 10 10 10 10 10 10 10 10 10 ## LR118 LR119 LR120 LR121 LR122 LR123 LR124 LR125 LR126 ## 10 10 10 10 10 10 10 10 10 ## LR127 LR128 LR129 LR130 LR131 LR132 LR133 LR134 LR135 ## 10 10 10 10 10 10 10 10 10 ## LR136 LR137 LR138 LR139 LR140 LR141 LR142 LR143 LR144 ## 10 10 10 10 10 10 10 10 10 ## LR145 LR146 LR147 LR148 LR149 LR150 LR151 LR152 LR153 ## 10 10 10 10 10 10 10 10 10 ## LR154 LR155 LR156 LR157 LR158 LR159 LR160 LR161 LR162 ## 10 10 10 10 10 10 10 10 10 ## LR163 LR164 LR165 LR166 LR167 LR168 LR169 LR170 LR171 ## 10 10 10 10 10 10 10 10 10 ## LR172 LR173 LR174 LR175 LR176 LR177 LR178 LR179 LR180 ## 10 10 10 10 10 10 10 10 10 ## LR181 LR182 LR183 LR184 LR185 LR186 LR187 LR188 LR189 ## 10 10 10 10 10 10 10 10 10 ## LR190 LR191 LR192 LR193 LR194 LR195 LR196 LR197 LR198 ## 10 10 10 10 10 10 10 10 10 ## LR199 LR200 LR201 LR202 LR203 LR204 LR205 LR206 LR207 ## 10 10 10 10 10 10 10 10 10 ## LR208 LR209 LR210 LR211 LR212 LR213 LR214 LR215 LR216 ## 10 10 10 10 10 10 10 10 10 ## LR217 LR218 LR219 LR220 LR221 LR222 LR223 LR224 LR225 ## 10 10 10 10 10 10 10 10 10 ## LR226 LR227 LR228 LR229 LR230 LR231 LR232 LR233 LR234 ## 10 10 10 10 10 10 10 10 10 ## LR235 LR236 LR237 LR238 LR239 LR240 LR241 LR242 LR243 ## 10 10 10 10 10 10 10 10 10 ## LR244 LR245 LR246 LR247 LR248 LR249 LR250 LR251 LR252 ## 10 10 10 10 10 10 10 10 10 ## LR253 LR254 LR255 LR256 LR257 LR258 LR259 LR260 LR261 ## 10 10 10 10 10 10 10 10 10 ## LR262 LR263 LR264 LR265 LR266 LR267 LR268 LR269 LR270 ## 10 10 10 10 10 10 10 10 10 ## LR271 LR272 LR273 LR274 LR275 LR276 LR277 LR278 LR279 ## 10 10 10 10 10 10 10 10 10 ## LR280 LR281 LR282 LR283 LR284 LR285 LR286 LR287 LR288 ## 10 10 10 10 10 10 10 10 10 ## LR289 LR290 LR291 LR292 LR293 LR294 LR295 LR296 LR297 ## 10 10 10 10 10 10 10 10 10 ## LR298 LR299 LR300 LR301 LR302 LR303 LR304 LR305 LR306 ## 10 10 10 10 10 10 10 10 10 ## LR307 LR308 LR309 LR310 LR311 LR312 LR313 LR314 LR315 ## 10 10 10 10 10 10 10 10 10 ## LR316 LR317 LR318 LR319 LR320 LR321 LR322 LR323 LR324 ## 10 10 10 10 10 10 10 10 10 ## LR325 LR326 LR327 LR328 LR329 LR330 LR331 LR332 LR333 ## 10 10 10 10 10 10 10 10 10 ## LR334 LR335 LR336 LR337 LR338 LR339 LR340 LR341 LR342 ## 10 10 10 10 10 10 10 10 10 ## LR343 LR344 LR345 LR346 LR347 LR348 LR349 LR350 LR351 ## 10 10 10 10 10 10 10 10 10 ## LR352 LR353 LR354 LR355 LR356 LR357 LR358 LR359 LR360 ## 10 10 10 10 10 10 10 10 10 ## LR361 LR362 LR363 LR364 LR365 LR366 LR367 LR368 LR369 ## 10 10 10 10 10 10 10 10 10 ## LR370 LR371 LR372 LR373 LR374 LR375 LR376 LR377 LR378 ## 10 10 10 10 10 10 10 10 10 ## LR379 LR380 LR381 LR382 LR383 LR384 LR385 LR386 LR387 ## 10 10 10 10 10 10 10 10 10 ## LR388 LR389 LR390 LR391 LR392 LR393 LR394 LR395 LR396 ## 10 10 10 10 10 10 10 10 10 ## LR397 LR398 LR399 LR400 LR401 LR402 LR403 LR404 LR405 ## 10 10 10 10 10 10 10 10 10 ## LR406 LR407 LR408 LR409 LR410 LR411 LR412 LR413 LR414 ## 10 10 10 10 10 10 10 10 10 ## LR415 LR416 LR417 LR418 LR419 LR420 LR421 LR422 LR423 ## 10 10 10 10 10 10 10 10 10 ## LR424 LR425 LR426 LR427 LR428 LR429 LR430 LR431 LR432 ## 10 10 10 10 10 10 10 10 10 ## LR433 LR434 LR435 LR436 LR437 LR438 LR439 LR440 LR441 ## 10 10 10 10 10 10 10 10 10 ## LR442 LR443 LR444 LR445 LR446 LR447 LR448 LR449 LR450 ## 10 10 10 10 10 10 10 10 10 ## LR451 LR452 LR453 LR454 LR455 LR456 LR457 LR458 LR459 ## 10 10 10 10 10 10 10 10 10 ## LR460 LR461 LR462 LR463 LR464 LR465 LR466 LR467 LR468 ## 10 10 10 10 10 10 10 10 10 ## LR469 LR470 LR471 LR472 LR473 LR474 LR475 LR476 LR477 ## 10 10 10 10 10 10 10 10 10 ## LR478 LR479 LR480 LR481 LR482 LR483 LR484 LR485 LR486 ## 10 10 10 10 10 10 10 10 10 ## LR487 LR488 LR489 LR490 LR491 LR492 LR493 LR494 LR495 ## 10 10 10 10 10 10 10 10 10 ## LR496 LR497 LR498 LR499 LR500 LR501 LR502 LR503 LR504 ## 10 10 10 10 10 10 10 10 10 ## LR505 LR506 LR507 LR508 LR509 LR510 LR511 LR512 LR513 ## 10 10 10 10 10 10 10 10 10 ## LR514 LR515 LR516 LR517 LR518 LR519 LR520 LR521 LR522 ## 10 10 10 10 10 10 10 10 10 ## LR523 LR524 LR525 LR526 LR527 LR528 LR529 LR530 LR531 ## 10 10 10 10 10 10 10 10 10 ## LR532 LR533 LR534 LR535 LR536 LR537 LR538 LR539 LR540 ## 10 10 10 10 10 10 10 10 10 ## LR541 LR542 LR543 LR544 LR545 LR546 LR547 LR548 LR549 ## 10 10 10 10 10 10 10 10 10 ## LR550 LR551 LR552 LR553 LR554 LR555 LR556 LR557 LR558 ## 10 10 10 10 10 10 10 10 10 ## LR559 LR560 LR561 LR562 LR563 LR564 LR565 LR566 LR567 ## 10 10 10 10 10 10 10 10 10 ## LR568 LR569 LR570 LR571 LR572 LR573 LR574 LR575 LR576 ## 10 10 10 10 10 10 10 10 10 ## LR577 LR578 LR579 LR580 LR581 LR582 LR583 LR584 LR585 ## 10 10 10 10 10 10 10 10 10 ## LR586 LR587 LR588 LR589 LR590 LR591 LR592 LR593 LR594 ## 10 10 10 10 10 10 10 10 10 ## LR595 LR596 LR597 LR598 LR599 LR600 ## 10 10 10 10 10 10 table(pull(mortality, Fish_ID)) ## ## LR001 LR002 LR003 LR004 LR005 LR006 LR007 LR008 LR009 ## 107 84 91 34 107 53 81 39 80 ## LR010 LR011 LR012 LR013 LR014 LR015 LR016 LR017 LR018 ## 69 5 72 97 62 3 73 2 3 ## LR019 LR020 LR021 LR022 LR023 LR024 LR025 LR026 LR027 ## 47 2 39 44 107 91 29 10 31 ## LR028 LR029 LR030 LR031 LR032 LR033 LR034 LR035 LR036 ## 2 80 24 42 40 107 85 32 3 ## LR037 LR038 LR039 LR040 LR041 LR042 LR043 LR044 LR045 ## 57 33 77 90 2 95 40 18 77 ## LR046 LR047 LR048 LR049 LR050 LR051 LR052 LR053 LR054 ## 42 17 107 107 6 2 98 41 2 ## LR055 LR056 LR057 LR058 LR059 LR060 LR061 LR062 LR063 ## 53 85 91 58 18 39 1 72 4 ## LR064 LR065 LR066 LR067 LR068 LR069 LR070 LR071 LR072 ## 86 38 58 39 25 36 86 82 62 ## LR073 LR074 LR075 LR076 LR077 LR078 LR079 LR080 LR081 ## 16 2 87 73 51 6 53 74 67 ## LR082 LR083 LR084 LR085 LR086 LR087 LR088 LR089 LR090 ## 83 67 37 42 73 82 37 37 39 ## LR091 LR092 LR093 LR094 LR095 LR096 LR097 LR098 LR099 ## 40 6 40 85 32 88 30 10 87 ## LR100 LR101 LR102 LR104 LR105 LR106 LR107 LR108 LR109 ## 88 95 97 82 66 39 97 107 107 ## LR110 LR111 LR112 LR113 LR114 LR115 LR116 LR117 LR118 ## 88 79 30 84 74 98 39 31 30 ## LR119 LR120 LR121 LR122 LR123 LR124 LR125 LR126 LR127 ## 79 81 77 107 7 107 38 107 94 ## LR128 LR129 LR130 LR131 LR132 LR133 LR134 LR135 LR136 ## 39 33 107 90 82 9 32 87 91 ## LR137 LR138 LR139 LR140 LR141 LR142 LR143 LR144 LR145 ## 86 29 55 78 81 39 37 62 41 ## LR146 LR147 LR148 LR149 LR150 LR151 LR152 LR153 LR154 ## 32 6 107 69 33 96 85 76 37 ## LR155 LR157 LR158 LR159 LR160 LR161 LR162 LR163 LR164 ## 32 88 93 81 80 38 48 41 83 ## LR165 LR167 LR168 LR169 LR170 LR171 LR172 LR173 LR174 ## 107 22 3 38 34 2 78 33 85 ## LR175 LR176 LR177 LR178 LR179 LR180 LR181 LR182 LR183 ## 33 29 33 77 5 10 42 33 38 ## LR184 LR185 LR186 LR187 LR189 LR190 LR191 LR192 LR193 ## 30 107 32 102 97 41 39 57 46 ## LR194 LR195 LR196 LR197 LR198 LR199 LR200 LR201 LR202 ## 54 54 40 39 4 17 44 88 9 ## LR203 LR204 LR205 LR206 LR207 LR208 LR209 LR210 LR211 ## 38 7 27 94 38 47 91 81 107 ## LR212 LR213 LR214 LR215 LR216 LR217 LR218 LR219 LR220 ## 25 48 41 32 48 82 64 47 25 ## LR221 LR222 LR223 LR224 LR225 LR226 LR227 LR228 LR229 ## 107 14 38 39 43 87 91 28 39 ## LR230 LR231 LR232 LR233 LR234 LR235 LR236 LR237 LR238 ## 70 66 84 83 90 107 58 40 80 ## LR239 LR240 LR241 LR242 LR243 LR244 LR245 LR246 LR247 ## 7 38 54 42 13 43 32 91 107 ## LR248 LR249 LR250 LR251 LR252 LR253 LR254 LR255 LR256 ## 107 107 26 31 31 53 40 4 86 ## LR257 LR258 LR259 LR260 LR261 LR262 LR263 LR264 LR265 ## 107 84 44 36 32 32 1 82 85 ## LR266 LR267 LR268 LR269 LR270 LR271 LR272 LR273 LR274 ## 83 77 80 107 22 38 85 79 3 ## LR275 LR276 LR277 LR278 LR279 LR281 LR282 LR283 LR284 ## 87 60 92 37 84 4 53 35 45 ## LR285 LR286 LR287 LR288 LR289 LR290 LR291 LR292 LR293 ## 41 17 2 87 34 96 84 39 36 ## LR294 LR295 LR296 LR297 LR298 LR299 LR300 LR301 LR302 ## 107 81 37 107 88 43 31 1 50 ## LR303 LR304 LR305 LR306 LR307 LR308 LR309 LR310 LR311 ## 107 55 60 32 44 2 35 1 32 ## LR312 LR313 LR314 LR315 LR316 LR317 LR318 LR320 LR321 ## 45 36 99 107 82 33 8 26 37 ## LR322 LR323 LR324 LR325 LR326 LR327 LR328 LR329 LR330 ## 43 48 37 43 44 33 100 42 7 ## LR331 LR332 LR333 LR334 LR335 LR336 LR337 LR338 LR339 ## 62 84 81 107 9 2 1 39 3 ## LR340 LR341 LR342 LR343 LR344 LR345 LR346 LR347 LR348 ## 31 2 41 80 9 12 26 63 91 ## LR349 LR350 LR351 LR352 LR353 LR354 LR355 LR356 LR357 ## 36 3 4 87 37 46 37 38 30 ## LR358 LR359 LR360 LR361 LR362 LR363 LR364 LR365 LR366 ## 40 40 91 107 95 82 26 32 83 ## LR367 LR368 LR369 LR370 LR371 LR372 LR373 LR374 LR375 ## 107 91 87 33 30 50 36 104 13 ## LR376 LR377 LR378 LR379 LR380 LR381 LR382 LR383 LR384 ## 1 27 4 85 92 38 40 107 83 ## LR385 LR386 LR387 LR388 LR389 LR390 LR391 LR392 LR393 ## 89 75 16 78 85 92 90 48 41 ## LR394 LR395 LR396 LR397 LR398 LR399 LR400 LR401 LR402 ## 107 107 28 17 43 7 96 2 107 ## LR403 LR404 LR405 LR406 LR407 LR408 LR409 LR410 LR411 ## 2 51 86 46 69 5 23 46 33 ## LR412 LR413 LR414 LR415 LR416 LR417 LR418 LR419 LR420 ## 41 73 34 97 44 33 38 31 107 ## LR421 LR422 LR423 LR424 LR425 LR426 LR427 LR428 LR429 ## 107 33 82 13 2 39 107 46 86 ## LR430 LR431 LR432 LR433 LR434 LR435 LR436 LR437 LR438 ## 83 36 8 102 64 73 29 41 69 ## LR439 LR440 LR441 LR442 LR443 LR444 LR445 LR446 LR447 ## 35 34 6 107 37 79 70 22 55 ## LR448 LR449 LR450 LR451 LR452 LR453 LR454 LR455 LR456 ## 55 43 89 58 90 91 80 4 107 ## LR457 LR458 LR459 LR460 LR461 LR462 LR463 LR464 LR465 ## 70 53 101 82 79 35 52 107 107 ## LR466 LR467 LR468 LR469 LR470 LR471 LR472 LR473 LR474 ## 55 22 19 49 59 107 106 35 55 ## LR475 LR476 LR477 LR478 LR479 LR480 LR481 LR482 LR483 ## 99 84 34 35 2 40 91 85 17 ## LR484 LR485 LR486 LR487 LR488 LR489 LR490 LR491 LR492 ## 80 73 3 93 55 83 73 91 97 ## LR493 LR494 LR495 LR496 LR497 LR498 LR499 LR500 LR501 ## 96 73 44 1 46 41 8 90 31 ## LR502 LR503 LR504 LR505 LR506 LR507 LR508 LR509 LR510 ## 95 96 4 96 40 22 4 95 30 ## LR511 LR512 LR513 LR514 LR515 LR516 LR517 LR518 LR519 ## 10 36 107 107 11 107 79 94 36 ## LR520 LR521 LR522 LR523 LR524 LR525 LR526 LR527 LR528 ## 107 17 41 82 87 51 98 76 58 ## LR529 LR530 LR531 LR532 LR533 LR534 LR535 LR536 LR537 ## 3 58 85 85 11 88 91 31 107 ## LR538 LR539 LR540 LR541 LR542 LR543 LR544 LR545 LR546 ## 24 94 30 107 83 61 51 46 41 ## LR547 LR548 LR549 LR550 LR551 LR552 LR553 LR554 LR555 ## 35 5 32 3 94 107 37 82 27 ## LR556 LR557 LR558 LR559 LR560 LR561 LR562 LR563 LR564 ## 87 47 102 88 82 90 29 74 16 ## LR565 LR566 LR567 LR568 LR569 LR570 LR571 LR572 LR573 ## 81 70 11 36 69 107 33 75 75 ## LR574 LR575 LR576 LR577 LR578 LR579 LR580 LR581 LR582 ## 76 39 23 39 32 40 87 70 28 ## LR583 LR584 LR585 LR586 LR587 LR588 LR589 LR590 LR591 ## 29 86 107 15 56 41 1 7 87 ## LR592 LR593 LR594 LR595 LR596 LR597 LR598 LR599 LR600 ## 89 16 107 34 107 92 31 22 91 10.4 Balance in experimental design temp &lt;- courtship %&gt;% group_by(Diet_comp, Prov_level) %&gt;% summarise(count=n(), n_unique=length(unique(Fish_ID))) sum(pull(temp, n_unique)) ## [1] 228 228 Fish_IDs is what we found already for this dataset. temp &lt;- eggs %&gt;% group_by(Diet_comp, Prov_level) %&gt;% summarise(n(), n_unique=length(unique(Fish_ID))) sum(pull(temp, n_unique)) ## [1] 269 269 Fish_IDs is what we found already for this dataset. WHY??? 21 for 2.5:1 100 21 21 Check below. egg_ids &lt;- unique(pull(eggs, Fish_ID)) courtship_ids &lt;- unique(pull(courtship, Fish_ID)) length(unique(c(egg_ids, courtship_ids))) ## [1] 493 length_weight_condition %&gt;% group_by(Diet_comp, Prov_level) %&gt;% summarise(n(), n_unique=length(unique(Fish_ID))) ## # A tibble: 15 x 4 ## Diet_comp Prov_level `n()` n_unique ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 1.6:1 50 400 40 ## 2 1.6:1 75 400 40 ## 3 1.6:1 100 400 40 ## 4 10.2:1 50 400 40 ## 5 10.2:1 75 400 40 ## # … with 10 more rows length(unique(pull(length_weight_condition, Fish_ID))) ## [1] 600 40 of each, hence 600 fish IDs mortality %&gt;% group_by(Diet_comp, Prov_level) %&gt;% summarise(n(), n_unique=length(unique(Fish_ID))) ## # A tibble: 15 x 4 ## Diet_comp Prov_level `n()` n_unique ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 1.6:1 50 2239 39 ## 2 1.6:1 75 2519 40 ## 3 1.6:1 100 2258 40 ## 4 10.2:1 50 1951 40 ## 5 10.2:1 75 1668 39 ## # … with 10 more rows 39 or 40 of each (six of 39, hence 594 fish IDs) 10.5 Calculate response variable(s) (if required) The courtship and eggs datasets already contain the response variable. We need to calculate the response variable for the change in fish length and change in body condition from the length_weight_condition dataset, and the time of death (or no death [censored]) from the mortality dataset. 10.5.1 Time of death temp_mortality2 &lt;- mortality %&gt;% filter(Status==&quot;alive&quot;) %&gt;% group_by(Fish_ID, Diet_comp, Prov_level, Sex) %&gt;% summarise(Lifespan=max(Week)) last_obs &lt;- mortality %&gt;% group_by(Fish_ID, Diet_comp, Prov_level) %&gt;% summarise(Last_sample=max(Week)) mortality2 &lt;- full_join(temp_mortality2, last_obs) %&gt;% mutate(Censored=ifelse(Lifespan==Last_sample, T, F), Lifespan=ifelse(is.na(Lifespan), 0, Lifespan), Censored=ifelse(Lifespan==0, FALSE, Censored)) %&gt;% ungroup() %&gt;% select(-Last_sample) ## Joining, by = c(&quot;Fish_ID&quot;, &quot;Diet_comp&quot;, &quot;Prov_level&quot;) skim(mortality2) ## # A tibble: 50 x 6 ## variable type stat level value formatted ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Fish_ID character missing .all 0 0 ## 2 Fish_ID character complete .all 594 594 ## 3 Fish_ID character n .all 594 594 ## 4 Fish_ID character min .all 5 5 ## 5 Fish_ID character max .all 5 5 ## # … with 45 more rows Above, we set the eight fish that were already dead at week 1 as having a lifespan of zero. 10.5.2 Change in length change1 &lt;- length_weight_condition %&gt;% group_by(Fish_ID, Diet_comp, Prov_level) %&gt;% do(m1 = lm(Length ~ Batch, data=.)) %&gt;% tidy(m1) %&gt;% filter(term==&quot;Batch&quot;) %&gt;% select(Fish_ID, Diet_comp, Prov_level, Length_change=estimate) Note that tidy silently drops NA coefficients. 10.5.3 Change in condition Not quite what they did in the paper. But… change2 &lt;- length_weight_condition %&gt;% group_by(Fish_ID, Diet_comp, Prov_level) %&gt;% do(m1 = lm(Cond_index ~ Batch, data=.)) %&gt;% tidy(m1) %&gt;% filter(term==&quot;Batch&quot;) %&gt;% select(Fish_ID, Diet_comp, Prov_level, CI_change=estimate) Note that tidy silently drops NA coefficients. 10.6 Merge all datasets together and check for correct number of rows dd &lt;- full_join(courtship, eggs) %&gt;% full_join(mortality2) %&gt;% full_join(change1) %&gt;% full_join(change2) ## Joining, by = c(&quot;Fish_ID&quot;, &quot;Family&quot;, &quot;Shelf_stack&quot;, &quot;Diet_comp&quot;, &quot;Prov_level&quot;, &quot;Fish_size&quot;) ## Joining, by = c(&quot;Fish_ID&quot;, &quot;Diet_comp&quot;, &quot;Prov_level&quot;) ## Joining, by = c(&quot;Fish_ID&quot;, &quot;Diet_comp&quot;, &quot;Prov_level&quot;) ## Joining, by = c(&quot;Fish_ID&quot;, &quot;Diet_comp&quot;, &quot;Prov_level&quot;) Bring in and merge the diet comp data diet_comp &lt;- read_csv(&quot;data/diet_comp_treatments.csv&quot;) ## Parsed with column specification: ## cols( ## Protein = col_double(), ## Lipid = col_double(), ## Diet_comp = col_character() ## ) dd &lt;- full_join(dd, diet_comp) ## Joining, by = &quot;Diet_comp&quot; dd &lt;- mutate(dd, Diet_comp = fct_relevel(Diet_comp, &quot;1.6:1&quot;, &quot;2.5:1&quot;, &quot;4.6:1&quot;, &quot;8.5:1&quot;, &quot;10.2:1&quot;), Prov_level = fct_relevel(as.character(Prov_level), &quot;50&quot;, &quot;75&quot;, &quot;100&quot;)) 10.7 Super sleuth questions About: Two females doing courtship, perhaps odd? Some males laying eggs… a bit strange. 10.8 Inspect shapes (distributions) ggplot(dd, aes(x=Total_court)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value ## with `binwidth`. ## Warning: Removed 367 rows containing non-finite values ## (stat_bin). ggplot(dd, aes(x=Total_egg)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value ## with `binwidth`. ## Warning: Removed 326 rows containing non-finite values ## (stat_bin). ggplot(dd, aes(x=Lifespan)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value ## with `binwidth`. ggplot(dd, aes(x=Length_change)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value ## with `binwidth`. ## Warning: Removed 26 rows containing non-finite values ## (stat_bin). ggplot(dd, aes(x=CI_change)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value ## with `binwidth`. ## Warning: Removed 26 rows containing non-finite values ## (stat_bin). dd &lt;- dd %&gt;% mutate(period=cut(Lifespan, breaks=c(-1, 20, 60, 106, 120))) 10.9 Inspect relationships “Male mortality risk was lowest on intermediate lipid intakes”. dd %&gt;% filter(Sex==&quot;Male&quot;) %&gt;% ggplot(aes(x=Lipid, y=Lifespan, col=Prov_level)) + geom_point(position = position_jitterdodge(jitter.width=0.05)) + facet_wrap(~period, nrow=3) “Female risk was generally reduced by low protein intakes.” dd %&gt;% filter(Sex==&quot;Female&quot;) %&gt;% ggplot(aes(x=Protein, y=Lifespan, col=Prov_level)) + geom_point(position = position_jitterdodge(jitter.width=0.05)) + facet_wrap(~period, nrow=3) “The effect of macronutrient intake on reproduction was similar between the sexes, with high protein intakes maximizing reproduction.” dd %&gt;% filter(Sex==&quot;Male&quot;) %&gt;% ggplot(aes(x=Protein, y=Total_court, col=Prov_level)) + geom_point(position = position_jitterdodge(jitter.width=0.05)) ## Warning: Removed 67 rows containing missing values ## (geom_point). dd %&gt;% filter(Sex==&quot;Female&quot;) %&gt;% ggplot(aes(x=Protein, y=Total_court, col=Prov_level)) + geom_point(position = position_jitterdodge(jitter.width=0.05)) ## Warning: Removed 292 rows containing missing values ## (geom_point). dd %&gt;% filter(Sex==&quot;Male&quot;) %&gt;% ggplot(aes(x=Protein, y=Total_egg, col=Prov_level)) + geom_point(position = position_jitterdodge(jitter.width=0.05)) ## Warning: Removed 288 rows containing missing values ## (geom_point). dd %&gt;% filter(Sex==&quot;Female&quot;) %&gt;% ggplot(aes(x=Protein, y=Total_egg, col=Prov_level)) + geom_point(position = position_jitterdodge(jitter.width=0.2, dodge.width = 5)) ## Warning: position_jitterdodge requires non-overlapping ## x intervals ## Warning: Removed 30 rows containing missing values ## (geom_point). 10.10 Moatt et al Data S1 – Mortality Data FID – Unique ID for each individual. Diet – Diet Treatment (Diet P:L: 1 = 10.2:1, 2 = 4.6:1, 3 = 2.5:1, 4 = 8.5:1, 5 = 1.6:1). Sex – Sex of individual (M = male, F = female). Size – Size classification of individual (L = large, S = Small). Level – Provisioning level, values represent percentages of monthly ad libitum monitoring. Total_eaten – Total pellet eaten in g from the start of the experiment. Eaten_wk – Amount of pellet consumed that week (gweek-1). P_tot - Total protein eaten in g from the start of the experiment. P2_total – P_tot2 squared (i.e. the total protein eaten squared). P_wk – Amount of protein consumed that week (gweek-1). P2_wk – P_wk2 squared (i.e. the weekly protein intake squared). L_tot - Total lipid eaten in g from the start of the experiment. L2_total – L_tot2 squared (i.e. the total lipid eaten squared). L_wk – Amount of lipid consumed that week (gweek-1). L2_wk – L_wk2 squared (i.e. the weekly lipid intake squared). Weight – Weight of fish from last weighing (g). Week_F – Experimental week. Status – Survival status (0= alive, 1 = Dead). T_group – Time period of the experiment (see Fig. S1). Initial_weight – Initial weight of individual at the start of the experiment. ZP – P_wk z transformed (mean of 0 and standard deviation of 1). ZP2 – P2_wk z transformed (mean of 0 and standard deviation of 1). ZL – L_wk z transformed (mean of 0 and standard deviation of 1). ZL2 – L2_wk z transformed (mean of 0 and standard deviation of 1). 10.11 Moatt et al Data S5 – Courtship Data FID – Unique ID for each individual. Family – Unique code for family group (i.e. clutch of origin). Each clutch produced from a unique sire and dam. Shelf_stack – Unique code for the stack and shelf of fish home tank. Diet – Diet Treatment (Diet P:L: 1 = 10.2:1, 2 = 4.6:1, 3 = 2.5:1, 4 = 8.5:1, 5 = 1.6:1). Level – Provisioning level, values represent percentages of monthly ad libitum monitoring. Size – Size classification of individual (L = large, S = Small). Trial – Number of trials that individual experienced. Days_breeding – Length of breeding season for that individual. P_day – Average protein intake per day during the breeding season (gday-1). P2_day – P_day2 squared (i.e. daily protein intake squared). L_day - Average lipid intake per day during the breeding season (gday-1). L2_day – L_day2 squared (i.e. daily lipid intake squared). Mean_react – Mean reaction time across all trials for that individual. Total_ZZ – Total number of zigzags across all trials. Total_leads – Total number of leads across all trials. Total_court – Total time courting across all trials. 10.12 Moatt et al Data S6 – Eggs Data FID – Unique ID for each individual. Family – Unique code for family group (i.e. clutch of origin). Each clutch produced from a unique sire and dam. Shelf_stack – Unique code for the stack and shelf of fish home tank. Diet – Diet Treatment (Diet P:L: 1 = 10.2:1, 2 = 4.6:1, 3 = 2.5:1, 4 = 8.5:1, 5 = 1.6:1). Level – Provisioning level, values represent percentages of monthly ad libitum monitoring. Size – Size classification of individual (L = large, S = Small). P_day – Average protein intake per day during the breeding season (gday-1). P2_day – P_day2 squared (i.e. daily protein intake squared). L_day - Average lipid intake per day during the breeding season (gday-1). L2_day – L_day2 squared (i.e. daily lipid intake squared). Days_breeding – Length of breeding season for that individual. Number_clutches – Number of clutches produced by that individual. Mean_number – Mean number of eggs per clutch. Total_egg – Total number of eggs produced. 10.13 Moatt et al Data S15 – Length, Weight and Condition Index Data FID – Unique ID for each individual. StackShelf – Unique code for the stack and shelf of fish home tank. Sex – Sex of individual (M = male, F = female). Diet – Diet Treatment (Diet P:L: 1 = 10.2:1, 2 = 4.6:1, 3 = 2.5:1, 4 = 8.5:1, 5 = 1.6:1). Level – Provisioning level, values represent percentages of monthly ad libitum monitoring. Size – Size classification of individual (L = large, S = Small). Batch – Weighing batch. NB Batch 1 is prior to diet treatments therefore has no corresponding values for protein and lipid intake. P_day – Average protein intake per day during the breeding season (gday-1). P2_day – P_day2 squared (i.e. daily protein intake squared). L_day - Average lipid intake per day during the breeding season (gday-1). L2_day – L_day2 squared (i.e. daily lipid intake squared). ZP – Daily protein intake z transformed (mean of 0 and standard deviation of 1), calculated for each sex independently. ZP2 – Daily protein intake squared, z transformed (mean of 0 and standard deviation of 1), calculated for each sex independently. ZL – Daily lipid intake z transformed (mean of 0 and standard deviation of 1), calculated for each sex independently. ZL2 – Daily lipid intake squared, z transformed (mean of 0 and standard deviation of 1), calculated for each sex independently. Ln – Length of individual in mm. Wt – Weight of individual in g. CI – Condition Index for each individual. "],
["summing-up.html", "Chapter 11 Summing up", " Chapter 11 Summing up "],
["references.html", "References", " References "]
]
